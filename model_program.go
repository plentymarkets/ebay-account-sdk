/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ebayaccount

import (
	"encoding/json"
)

// Program A seller program in to which a seller can opt-in.
type Program struct {
	// A seller program in to which a seller can opt-in. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ProgramTypeEnum'>eBay API documentation</a>
	ProgramType *string `json:"programType,omitempty"`
}

// NewProgram instantiates a new Program object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgram() *Program {
	this := Program{}
	return &this
}

// NewProgramWithDefaults instantiates a new Program object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramWithDefaults() *Program {
	this := Program{}
	return &this
}

// GetProgramType returns the ProgramType field value if set, zero value otherwise.
func (o *Program) GetProgramType() string {
	if o == nil || o.ProgramType == nil {
		var ret string
		return ret
	}
	return *o.ProgramType
}

// GetProgramTypeOk returns a tuple with the ProgramType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Program) GetProgramTypeOk() (*string, bool) {
	if o == nil || o.ProgramType == nil {
		return nil, false
	}
	return o.ProgramType, true
}

// HasProgramType returns a boolean if a field has been set.
func (o *Program) HasProgramType() bool {
	if o != nil && o.ProgramType != nil {
		return true
	}

	return false
}

// SetProgramType gets a reference to the given string and assigns it to the ProgramType field.
func (o *Program) SetProgramType(v string) {
	o.ProgramType = &v
}

func (o Program) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProgramType != nil {
		toSerialize["programType"] = o.ProgramType
	}
	return json.Marshal(toSerialize)
}

type NullableProgram struct {
	value *Program
	isSet bool
}

func (v NullableProgram) Get() *Program {
	return v.value
}

func (v *NullableProgram) Set(val *Program) {
	v.value = val
	v.isSet = true
}

func (v NullableProgram) IsSet() bool {
	return v.isSet
}

func (v *NullableProgram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgram(val *Program) *NullableProgram {
	return &NullableProgram{value: val, isSet: true}
}

func (v NullableProgram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


