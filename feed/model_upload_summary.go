/*
Feed API

<p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

API version: v1.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package feed

import (
	"encoding/json"
)

// UploadSummary This container provides summary information on an upload feed (not applicable for download feed types).
type UploadSummary struct {
	// The number of records, such as the number of listings created or the number of pictures uploaded to a listing, that failed to process during the upload feed. Check the response file and correct any issues mentioned. If the feed fails before processing, no response file is provided. In this case check the REST output response.
	FailureCount *int32 `json:"failureCount,omitempty"`
	// The number of records that were successfully processed during the upload feed.
	SuccessCount *int32 `json:"successCount,omitempty"`
}

// NewUploadSummary instantiates a new UploadSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadSummary() *UploadSummary {
	this := UploadSummary{}
	return &this
}

// NewUploadSummaryWithDefaults instantiates a new UploadSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadSummaryWithDefaults() *UploadSummary {
	this := UploadSummary{}
	return &this
}

// GetFailureCount returns the FailureCount field value if set, zero value otherwise.
func (o *UploadSummary) GetFailureCount() int32 {
	if o == nil || o.FailureCount == nil {
		var ret int32
		return ret
	}
	return *o.FailureCount
}

// GetFailureCountOk returns a tuple with the FailureCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadSummary) GetFailureCountOk() (*int32, bool) {
	if o == nil || o.FailureCount == nil {
		return nil, false
	}
	return o.FailureCount, true
}

// HasFailureCount returns a boolean if a field has been set.
func (o *UploadSummary) HasFailureCount() bool {
	if o != nil && o.FailureCount != nil {
		return true
	}

	return false
}

// SetFailureCount gets a reference to the given int32 and assigns it to the FailureCount field.
func (o *UploadSummary) SetFailureCount(v int32) {
	o.FailureCount = &v
}

// GetSuccessCount returns the SuccessCount field value if set, zero value otherwise.
func (o *UploadSummary) GetSuccessCount() int32 {
	if o == nil || o.SuccessCount == nil {
		var ret int32
		return ret
	}
	return *o.SuccessCount
}

// GetSuccessCountOk returns a tuple with the SuccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadSummary) GetSuccessCountOk() (*int32, bool) {
	if o == nil || o.SuccessCount == nil {
		return nil, false
	}
	return o.SuccessCount, true
}

// HasSuccessCount returns a boolean if a field has been set.
func (o *UploadSummary) HasSuccessCount() bool {
	if o != nil && o.SuccessCount != nil {
		return true
	}

	return false
}

// SetSuccessCount gets a reference to the given int32 and assigns it to the SuccessCount field.
func (o *UploadSummary) SetSuccessCount(v int32) {
	o.SuccessCount = &v
}

func (o UploadSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailureCount != nil {
		toSerialize["failureCount"] = o.FailureCount
	}
	if o.SuccessCount != nil {
		toSerialize["successCount"] = o.SuccessCount
	}
	return json.Marshal(toSerialize)
}

type NullableUploadSummary struct {
	value *UploadSummary
	isSet bool
}

func (v NullableUploadSummary) Get() *UploadSummary {
	return v.value
}

func (v *NullableUploadSummary) Set(val *UploadSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadSummary(val *UploadSummary) *NullableUploadSummary {
	return &NullableUploadSummary{value: val, isSet: true}
}

func (v NullableUploadSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


