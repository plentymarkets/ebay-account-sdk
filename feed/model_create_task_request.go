/*
Feed API

<p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

API version: v1.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package feed

import (
	"encoding/json"
)

// CreateTaskRequest The type that defines the fields for the createTask method.
type CreateTaskRequest struct {
	// The feed type associated with the task. Only use a feedType that is available for your API. Available feed types: LMS FeedTypes: All LMS feed types except LMS_ORDER_REPORT and LMS_ACTIVE_INVENTORY_REPORT File Exchange FeedTypes
	FeedType *string `json:"feedType,omitempty"`
	// The schemaVersion/version number of the file format (use the schema version of the API to which you are programming): LMS Version Details / Schema Version File Exchange Schema Version
	SchemaVersion *string `json:"schemaVersion,omitempty"`
}

// NewCreateTaskRequest instantiates a new CreateTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTaskRequest() *CreateTaskRequest {
	this := CreateTaskRequest{}
	return &this
}

// NewCreateTaskRequestWithDefaults instantiates a new CreateTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTaskRequestWithDefaults() *CreateTaskRequest {
	this := CreateTaskRequest{}
	return &this
}

// GetFeedType returns the FeedType field value if set, zero value otherwise.
func (o *CreateTaskRequest) GetFeedType() string {
	if o == nil || o.FeedType == nil {
		var ret string
		return ret
	}
	return *o.FeedType
}

// GetFeedTypeOk returns a tuple with the FeedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTaskRequest) GetFeedTypeOk() (*string, bool) {
	if o == nil || o.FeedType == nil {
		return nil, false
	}
	return o.FeedType, true
}

// HasFeedType returns a boolean if a field has been set.
func (o *CreateTaskRequest) HasFeedType() bool {
	if o != nil && o.FeedType != nil {
		return true
	}

	return false
}

// SetFeedType gets a reference to the given string and assigns it to the FeedType field.
func (o *CreateTaskRequest) SetFeedType(v string) {
	o.FeedType = &v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *CreateTaskRequest) GetSchemaVersion() string {
	if o == nil || o.SchemaVersion == nil {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTaskRequest) GetSchemaVersionOk() (*string, bool) {
	if o == nil || o.SchemaVersion == nil {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *CreateTaskRequest) HasSchemaVersion() bool {
	if o != nil && o.SchemaVersion != nil {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *CreateTaskRequest) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

func (o CreateTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeedType != nil {
		toSerialize["feedType"] = o.FeedType
	}
	if o.SchemaVersion != nil {
		toSerialize["schemaVersion"] = o.SchemaVersion
	}
	return json.Marshal(toSerialize)
}

type NullableCreateTaskRequest struct {
	value *CreateTaskRequest
	isSet bool
}

func (v NullableCreateTaskRequest) Get() *CreateTaskRequest {
	return v.value
}

func (v *NullableCreateTaskRequest) Set(val *CreateTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTaskRequest(val *CreateTaskRequest) *NullableCreateTaskRequest {
	return &NullableCreateTaskRequest{value: val, isSet: true}
}

func (v NullableCreateTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


