/*
Feed API

<p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

API version: v1.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package feed

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// CustomerServiceMetricTaskApiService CustomerServiceMetricTaskApi service
type CustomerServiceMetricTaskApiService service

type ApiCreateCustomerServiceMetricTaskRequest struct {
	ctx _context.Context
	ApiService *CustomerServiceMetricTaskApiService
	acceptLanguage *string
	createServiceMetricsTaskRequest *CreateServiceMetricsTaskRequest
}

// Use this header to specify the natural language in which the authenticated user desires the response.
func (r ApiCreateCustomerServiceMetricTaskRequest) AcceptLanguage(acceptLanguage string) ApiCreateCustomerServiceMetricTaskRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}
// Request payload containing version, feedType, and optional filterCriteria.
func (r ApiCreateCustomerServiceMetricTaskRequest) CreateServiceMetricsTaskRequest(createServiceMetricsTaskRequest CreateServiceMetricsTaskRequest) ApiCreateCustomerServiceMetricTaskRequest {
	r.createServiceMetricsTaskRequest = &createServiceMetricsTaskRequest
	return r
}

func (r ApiCreateCustomerServiceMetricTaskRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CreateCustomerServiceMetricTaskExecute(r)
}

/*
CreateCustomerServiceMetricTask Method for CreateCustomerServiceMetricTask

Use this method to create a customer service metrics download task with filter criteria for the customer service metrics report. When using this method, specify the feedType and filterCriteria including both evaluationMarketplaceId and customerServiceMetricType for the report. The method returns the location response header containing the call URI to use with getCustomerServiceMetricTask to retrieve status and details on the task. Only CURRENT Customer Service Metrics reports can be generated with the Sell Feed API. PROJECTED reports are not supported at this time. See the getCustomerServiceMetric method document in the Analytics API for more information about these two types of reports. Note: Before calling this API, retrieve the summary of the seller's performance and rating for the customer service metric by calling getCustomerServiceMetric (part of the Analytics API). You can then populate the create task request fields with the values from the response. This technique eliminates failed tasks that request a report for a customerServiceMetricType and evaluationMarketplaceId that are without evaluation.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCustomerServiceMetricTaskRequest
*/
func (a *CustomerServiceMetricTaskApiService) CreateCustomerServiceMetricTask(ctx _context.Context) ApiCreateCustomerServiceMetricTaskRequest {
	return ApiCreateCustomerServiceMetricTaskRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CustomerServiceMetricTaskApiService) CreateCustomerServiceMetricTaskExecute(r ApiCreateCustomerServiceMetricTaskRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerServiceMetricTaskApiService.CreateCustomerServiceMetricTask")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customer_service_metric_task"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.acceptLanguage == nil {
		return nil, reportError("acceptLanguage is required and must be specified")
	}
	if r.createServiceMetricsTaskRequest == nil {
		return nil, reportError("createServiceMetricsTaskRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["accept-language"] = parameterToString(*r.acceptLanguage, "")
	// body params
	localVarPostBody = r.createServiceMetricsTaskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCustomerServiceMetricTaskRequest struct {
	ctx _context.Context
	ApiService *CustomerServiceMetricTaskApiService
	taskId string
}


func (r ApiGetCustomerServiceMetricTaskRequest) Execute() (ServiceMetricsTask, *_nethttp.Response, error) {
	return r.ApiService.GetCustomerServiceMetricTaskExecute(r)
}

/*
GetCustomerServiceMetricTask Method for GetCustomerServiceMetricTask

Use this method to retrieve customer service metric task details for the specified task. The input is task_id.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId Use this path parameter to specify the task ID value for the customer service metric task to retrieve.
 @return ApiGetCustomerServiceMetricTaskRequest
*/
func (a *CustomerServiceMetricTaskApiService) GetCustomerServiceMetricTask(ctx _context.Context, taskId string) ApiGetCustomerServiceMetricTaskRequest {
	return ApiGetCustomerServiceMetricTaskRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return ServiceMetricsTask
func (a *CustomerServiceMetricTaskApiService) GetCustomerServiceMetricTaskExecute(r ApiGetCustomerServiceMetricTaskRequest) (ServiceMetricsTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ServiceMetricsTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerServiceMetricTaskApiService.GetCustomerServiceMetricTask")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customer_service_metric_task/{task_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomerServiceMetricTasksRequest struct {
	ctx _context.Context
	ApiService *CustomerServiceMetricTaskApiService
	dateRange *string
	feedType *string
	limit *string
	lookBackDays *string
	offset *string
}

// The task creation date range. The results are filtered to include only tasks with a creation date that is equal to the dates specified or is within the specified range. Do not use with the look_back_days parameter. Format: UTC For example, tasks within a range: yyyy-MM-ddThh:mm:ss.SSSZ..yyyy-MM-ddThh:mm:ss.SSSZ Tasks created on March 8, 2020 2020-03-08T00:00.00.000Z..2020-03-09T00:00:00.000Z Maximum: 90 days
func (r ApiGetCustomerServiceMetricTasksRequest) DateRange(dateRange string) ApiGetCustomerServiceMetricTasksRequest {
	r.dateRange = &dateRange
	return r
}
// The feed type associated with the task. The only presently supported value is CUSTOMER_SERVICE_METRICS_REPORT.
func (r ApiGetCustomerServiceMetricTasksRequest) FeedType(feedType string) ApiGetCustomerServiceMetricTasksRequest {
	r.feedType = &feedType
	return r
}
// The number of customer service metric tasks to return per page of the result set. Use this parameter in conjunction with the offset parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves tasks 11 thru 20 from the result set. If this parameter is omitted, the default value is used. Note:This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 10 Maximum: 500
func (r ApiGetCustomerServiceMetricTasksRequest) Limit(limit string) ApiGetCustomerServiceMetricTasksRequest {
	r.limit = &limit
	return r
}
// The number of previous days in which to search for tasks. Do not use with the date_range parameter. If both date_range and look_back_days are omitted, this parameter&#39;s default value is used. Default value: 7 Range: 1-90 (inclusive)
func (r ApiGetCustomerServiceMetricTasksRequest) LookBackDays(lookBackDays string) ApiGetCustomerServiceMetricTasksRequest {
	r.lookBackDays = &lookBackDays
	return r
}
// The number of customer service metric tasks to skip in the result set before returning the first task in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. Default: 0
func (r ApiGetCustomerServiceMetricTasksRequest) Offset(offset string) ApiGetCustomerServiceMetricTasksRequest {
	r.offset = &offset
	return r
}

func (r ApiGetCustomerServiceMetricTasksRequest) Execute() (CustomerServiceMetricTaskCollection, *_nethttp.Response, error) {
	return r.ApiService.GetCustomerServiceMetricTasksExecute(r)
}

/*
GetCustomerServiceMetricTasks Method for GetCustomerServiceMetricTasks

Use this method to return an array of customer service metric tasks. You can limit the tasks returned by specifying a date range. Note: You can pass in either the look_back_days or date_range, but not both.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCustomerServiceMetricTasksRequest
*/
func (a *CustomerServiceMetricTaskApiService) GetCustomerServiceMetricTasks(ctx _context.Context) ApiGetCustomerServiceMetricTasksRequest {
	return ApiGetCustomerServiceMetricTasksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomerServiceMetricTaskCollection
func (a *CustomerServiceMetricTaskApiService) GetCustomerServiceMetricTasksExecute(r ApiGetCustomerServiceMetricTasksRequest) (CustomerServiceMetricTaskCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CustomerServiceMetricTaskCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerServiceMetricTaskApiService.GetCustomerServiceMetricTasks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customer_service_metric_task"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.dateRange != nil {
		localVarQueryParams.Add("date_range", parameterToString(*r.dateRange, ""))
	}
	if r.feedType != nil {
		localVarQueryParams.Add("feed_type", parameterToString(*r.feedType, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.lookBackDays != nil {
		localVarQueryParams.Add("look_back_days", parameterToString(*r.lookBackDays, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
