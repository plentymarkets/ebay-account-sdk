/*
Feed API

<p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

API version: v1.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package feed

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// InventoryTaskApiService InventoryTaskApi service
type InventoryTaskApiService service

type ApiCreateInventoryTaskRequest struct {
	ctx _context.Context
	ApiService *InventoryTaskApiService
	createInventoryTaskRequest *CreateInventoryTaskRequest
	xEBAYCMARKETPLACEID *string
}

// The request payload containing the version, feedType, and optional filterCriteria.
func (r ApiCreateInventoryTaskRequest) CreateInventoryTaskRequest(createInventoryTaskRequest CreateInventoryTaskRequest) ApiCreateInventoryTaskRequest {
	r.createInventoryTaskRequest = &createInventoryTaskRequest
	return r
}
// The ID of the eBay marketplace where the item is hosted. Note: This value is case sensitive. For example: X-EBAY-C-MARKETPLACE-ID:EBAY_US This identifies the eBay marketplace that applies to this task. See MarketplaceIdEnum.
func (r ApiCreateInventoryTaskRequest) XEBAYCMARKETPLACEID(xEBAYCMARKETPLACEID string) ApiCreateInventoryTaskRequest {
	r.xEBAYCMARKETPLACEID = &xEBAYCMARKETPLACEID
	return r
}

func (r ApiCreateInventoryTaskRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CreateInventoryTaskExecute(r)
}

/*
CreateInventoryTask Method for CreateInventoryTask

This method creates an inventory-related download task for a specified feed type with optional filter criteria. When using this method, specify the feedType. This method returns the location response header containing the getInventoryTask call URI to retrieve the inventory task you just created. The URL includes the eBay-assigned task ID, which you can use to reference the inventory task. To retrieve the status of the task, use the getInventoryTask method to retrieve a single task ID or the getInventoryTasks method to retrieve multiple task IDs. Note: The scope depends on the feed type. An error message results when an unsupported scope or feed type is specified.Presently, this method supports Active Inventory Report. The ActiveInventoryReport returns a report that contains price and quantity information for all of the active listings for a specific seller. A seller can use this information to maintain their inventory on eBay.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateInventoryTaskRequest
*/
func (a *InventoryTaskApiService) CreateInventoryTask(ctx _context.Context) ApiCreateInventoryTaskRequest {
	return ApiCreateInventoryTaskRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InventoryTaskApiService) CreateInventoryTaskExecute(r ApiCreateInventoryTaskRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryTaskApiService.CreateInventoryTask")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventory_task"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.createInventoryTaskRequest == nil {
		return nil, reportError("createInventoryTaskRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEBAYCMARKETPLACEID != nil {
		localVarHeaderParams["X-EBAY-C-MARKETPLACE-ID"] = parameterToString(*r.xEBAYCMARKETPLACEID, "")
	}
	// body params
	localVarPostBody = r.createInventoryTaskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetInventoryTaskRequest struct {
	ctx _context.Context
	ApiService *InventoryTaskApiService
	taskId string
}


func (r ApiGetInventoryTaskRequest) Execute() (InventoryTask, *_nethttp.Response, error) {
	return r.ApiService.GetInventoryTaskExecute(r)
}

/*
GetInventoryTask Method for GetInventoryTask

This method retrieves the task details and status of the specified inventory-related task. The input is task_id.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskId The ID of the task. This ID was generated when the task was created by the createInventoryTask method
 @return ApiGetInventoryTaskRequest
*/
func (a *InventoryTaskApiService) GetInventoryTask(ctx _context.Context, taskId string) ApiGetInventoryTaskRequest {
	return ApiGetInventoryTaskRequest{
		ApiService: a,
		ctx: ctx,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return InventoryTask
func (a *InventoryTaskApiService) GetInventoryTaskExecute(r ApiGetInventoryTaskRequest) (InventoryTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InventoryTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryTaskApiService.GetInventoryTask")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventory_task/{task_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", _neturl.PathEscape(parameterToString(r.taskId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInventoryTasksRequest struct {
	ctx _context.Context
	ApiService *InventoryTaskApiService
	feedType *string
	scheduleId *string
	lookBackDays *string
	dateRange *string
	limit *string
	offset *string
}

// The feed type associated with the inventory task. Either feed_type or schedule_id is required. Do not use with the schedule_id parameter. Presently, only one feed type is available: LMS_ACTIVE_INVENTORY_REPORT
func (r ApiGetInventoryTasksRequest) FeedType(feedType string) ApiGetInventoryTasksRequest {
	r.feedType = &feedType
	return r
}
// The ID of the schedule for which to retrieve the latest result file. This ID is generated when the schedule was created by the createSchedule method. Schedules apply to downloaded reports (LMS_ACTIVE_INVENTORY_REPORT). Either schedule_id or feed_type is required. Do not use with the feed_type parameter.
func (r ApiGetInventoryTasksRequest) ScheduleId(scheduleId string) ApiGetInventoryTasksRequest {
	r.scheduleId = &scheduleId
	return r
}
// The number of previous days in which to search for tasks. Do not use with the date_range parameter. If both date_range and look_back_days are omitted, this parameter&#39;s default value is used. Default: 7 Range: 1-90 (inclusive)
func (r ApiGetInventoryTasksRequest) LookBackDays(lookBackDays string) ApiGetInventoryTasksRequest {
	r.lookBackDays = &lookBackDays
	return r
}
// Specifies the range of task creation dates used to filter the results. The results are filtered to include only tasks with a creation date that is equal to this date or is within specified range. Note: Maximum date range window size is 90 days. Valid Format (UTC): yyyy-MM-ddThh:mm:ss.SSSZ..yyyy-MM-ddThh:mm:ss.SSSZ For example: Tasks created on March 31, 2021 2021-03-31T00:00:00.000Z..2021-03-31T00:00:00.000Z
func (r ApiGetInventoryTasksRequest) DateRange(dateRange string) ApiGetInventoryTasksRequest {
	r.dateRange = &dateRange
	return r
}
// The maximum number of tasks that can be returned on each page of the paginated response. Use this parameter in conjunction with the offset parameter to control the pagination of the output. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. For example, if offset is set to 10 and limit is set to 10, the call retrieves tasks 11 thru 20 from the result set. If this parameter is omitted, the default value is used. Default: 10 Maximum: 500
func (r ApiGetInventoryTasksRequest) Limit(limit string) ApiGetInventoryTasksRequest {
	r.limit = &limit
	return r
}
// The number of tasks to skip in the result set before returning the first task in the paginated response. Combine offset with the limit query parameter to control the items returned in the response. For example, if you supply an offset of 0 and a limit of 10, the first page of the response contains the first 10 items from the complete list of items retrieved by the call. If offset is 10 and limit is 20, the first page of the response contains items 11-30 from the complete result set. If this query parameter is not set, the default value is used and the first page of records is returned. Default: 0
func (r ApiGetInventoryTasksRequest) Offset(offset string) ApiGetInventoryTasksRequest {
	r.offset = &offset
	return r
}

func (r ApiGetInventoryTasksRequest) Execute() (InventoryTaskCollection, *_nethttp.Response, error) {
	return r.ApiService.GetInventoryTasksExecute(r)
}

/*
GetInventoryTasks Method for GetInventoryTasks

This method searches for multiple tasks of a specific feed type, and includes date filters and pagination.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetInventoryTasksRequest
*/
func (a *InventoryTaskApiService) GetInventoryTasks(ctx _context.Context) ApiGetInventoryTasksRequest {
	return ApiGetInventoryTasksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InventoryTaskCollection
func (a *InventoryTaskApiService) GetInventoryTasksExecute(r ApiGetInventoryTasksRequest) (InventoryTaskCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InventoryTaskCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryTaskApiService.GetInventoryTasks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventory_task"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.feedType != nil {
		localVarQueryParams.Add("feed_type", parameterToString(*r.feedType, ""))
	}
	if r.scheduleId != nil {
		localVarQueryParams.Add("schedule_id", parameterToString(*r.scheduleId, ""))
	}
	if r.lookBackDays != nil {
		localVarQueryParams.Add("look_back_days", parameterToString(*r.lookBackDays, ""))
	}
	if r.dateRange != nil {
		localVarQueryParams.Add("date_range", parameterToString(*r.dateRange, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
