/*
Feed API

<p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

API version: v1.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package feed

import (
	"encoding/json"
)

// OrderTask The type that defines the fields for the getOrderTask response.
type OrderTask struct {
	// The timestamp when the task went into the COMPLETED or COMPLETED_WITH_ERROR state. This state means that eBay has compiled the report for the seller based on the seller&rsquo;s filter criteria, and the seller can run a getResultFile call to download the report.
	CompletionDate *string `json:"completionDate,omitempty"`
	// The date the task was created.
	CreationDate *string `json:"creationDate,omitempty"`
	// The path to the call URI used to retrieve the task.
	DetailHref *string `json:"detailHref,omitempty"`
	// The feed type associated with the task.
	FeedType *string `json:"feedType,omitempty"`
	FilterCriteria *OrderFilterCriteria `json:"filterCriteria,omitempty"`
	// The schema version number associated with the create task.
	SchemaVersion *string `json:"schemaVersion,omitempty"`
	// The enumeration value that indicates the state of the task that was submitted in the request. See FeedStatusEnum for information. The values COMPLETED and COMPLETED_WITH_ERROR indicate the Order Report file is ready to download. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FeedStatusEnum'>eBay API documentation</a>
	Status *string `json:"status,omitempty"`
	// The ID of the task that was submitted in the request.
	TaskId *string `json:"taskId,omitempty"`
	UploadSummary *UploadSummary `json:"uploadSummary,omitempty"`
}

// NewOrderTask instantiates a new OrderTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderTask() *OrderTask {
	this := OrderTask{}
	return &this
}

// NewOrderTaskWithDefaults instantiates a new OrderTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderTaskWithDefaults() *OrderTask {
	this := OrderTask{}
	return &this
}

// GetCompletionDate returns the CompletionDate field value if set, zero value otherwise.
func (o *OrderTask) GetCompletionDate() string {
	if o == nil || o.CompletionDate == nil {
		var ret string
		return ret
	}
	return *o.CompletionDate
}

// GetCompletionDateOk returns a tuple with the CompletionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTask) GetCompletionDateOk() (*string, bool) {
	if o == nil || o.CompletionDate == nil {
		return nil, false
	}
	return o.CompletionDate, true
}

// HasCompletionDate returns a boolean if a field has been set.
func (o *OrderTask) HasCompletionDate() bool {
	if o != nil && o.CompletionDate != nil {
		return true
	}

	return false
}

// SetCompletionDate gets a reference to the given string and assigns it to the CompletionDate field.
func (o *OrderTask) SetCompletionDate(v string) {
	o.CompletionDate = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *OrderTask) GetCreationDate() string {
	if o == nil || o.CreationDate == nil {
		var ret string
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTask) GetCreationDateOk() (*string, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *OrderTask) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given string and assigns it to the CreationDate field.
func (o *OrderTask) SetCreationDate(v string) {
	o.CreationDate = &v
}

// GetDetailHref returns the DetailHref field value if set, zero value otherwise.
func (o *OrderTask) GetDetailHref() string {
	if o == nil || o.DetailHref == nil {
		var ret string
		return ret
	}
	return *o.DetailHref
}

// GetDetailHrefOk returns a tuple with the DetailHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTask) GetDetailHrefOk() (*string, bool) {
	if o == nil || o.DetailHref == nil {
		return nil, false
	}
	return o.DetailHref, true
}

// HasDetailHref returns a boolean if a field has been set.
func (o *OrderTask) HasDetailHref() bool {
	if o != nil && o.DetailHref != nil {
		return true
	}

	return false
}

// SetDetailHref gets a reference to the given string and assigns it to the DetailHref field.
func (o *OrderTask) SetDetailHref(v string) {
	o.DetailHref = &v
}

// GetFeedType returns the FeedType field value if set, zero value otherwise.
func (o *OrderTask) GetFeedType() string {
	if o == nil || o.FeedType == nil {
		var ret string
		return ret
	}
	return *o.FeedType
}

// GetFeedTypeOk returns a tuple with the FeedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTask) GetFeedTypeOk() (*string, bool) {
	if o == nil || o.FeedType == nil {
		return nil, false
	}
	return o.FeedType, true
}

// HasFeedType returns a boolean if a field has been set.
func (o *OrderTask) HasFeedType() bool {
	if o != nil && o.FeedType != nil {
		return true
	}

	return false
}

// SetFeedType gets a reference to the given string and assigns it to the FeedType field.
func (o *OrderTask) SetFeedType(v string) {
	o.FeedType = &v
}

// GetFilterCriteria returns the FilterCriteria field value if set, zero value otherwise.
func (o *OrderTask) GetFilterCriteria() OrderFilterCriteria {
	if o == nil || o.FilterCriteria == nil {
		var ret OrderFilterCriteria
		return ret
	}
	return *o.FilterCriteria
}

// GetFilterCriteriaOk returns a tuple with the FilterCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTask) GetFilterCriteriaOk() (*OrderFilterCriteria, bool) {
	if o == nil || o.FilterCriteria == nil {
		return nil, false
	}
	return o.FilterCriteria, true
}

// HasFilterCriteria returns a boolean if a field has been set.
func (o *OrderTask) HasFilterCriteria() bool {
	if o != nil && o.FilterCriteria != nil {
		return true
	}

	return false
}

// SetFilterCriteria gets a reference to the given OrderFilterCriteria and assigns it to the FilterCriteria field.
func (o *OrderTask) SetFilterCriteria(v OrderFilterCriteria) {
	o.FilterCriteria = &v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *OrderTask) GetSchemaVersion() string {
	if o == nil || o.SchemaVersion == nil {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTask) GetSchemaVersionOk() (*string, bool) {
	if o == nil || o.SchemaVersion == nil {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *OrderTask) HasSchemaVersion() bool {
	if o != nil && o.SchemaVersion != nil {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *OrderTask) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrderTask) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTask) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrderTask) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OrderTask) SetStatus(v string) {
	o.Status = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *OrderTask) GetTaskId() string {
	if o == nil || o.TaskId == nil {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTask) GetTaskIdOk() (*string, bool) {
	if o == nil || o.TaskId == nil {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *OrderTask) HasTaskId() bool {
	if o != nil && o.TaskId != nil {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *OrderTask) SetTaskId(v string) {
	o.TaskId = &v
}

// GetUploadSummary returns the UploadSummary field value if set, zero value otherwise.
func (o *OrderTask) GetUploadSummary() UploadSummary {
	if o == nil || o.UploadSummary == nil {
		var ret UploadSummary
		return ret
	}
	return *o.UploadSummary
}

// GetUploadSummaryOk returns a tuple with the UploadSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderTask) GetUploadSummaryOk() (*UploadSummary, bool) {
	if o == nil || o.UploadSummary == nil {
		return nil, false
	}
	return o.UploadSummary, true
}

// HasUploadSummary returns a boolean if a field has been set.
func (o *OrderTask) HasUploadSummary() bool {
	if o != nil && o.UploadSummary != nil {
		return true
	}

	return false
}

// SetUploadSummary gets a reference to the given UploadSummary and assigns it to the UploadSummary field.
func (o *OrderTask) SetUploadSummary(v UploadSummary) {
	o.UploadSummary = &v
}

func (o OrderTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompletionDate != nil {
		toSerialize["completionDate"] = o.CompletionDate
	}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	if o.DetailHref != nil {
		toSerialize["detailHref"] = o.DetailHref
	}
	if o.FeedType != nil {
		toSerialize["feedType"] = o.FeedType
	}
	if o.FilterCriteria != nil {
		toSerialize["filterCriteria"] = o.FilterCriteria
	}
	if o.SchemaVersion != nil {
		toSerialize["schemaVersion"] = o.SchemaVersion
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.TaskId != nil {
		toSerialize["taskId"] = o.TaskId
	}
	if o.UploadSummary != nil {
		toSerialize["uploadSummary"] = o.UploadSummary
	}
	return json.Marshal(toSerialize)
}

type NullableOrderTask struct {
	value *OrderTask
	isSet bool
}

func (v NullableOrderTask) Get() *OrderTask {
	return v.value
}

func (v *NullableOrderTask) Set(val *OrderTask) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderTask) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderTask(val *OrderTask) *NullableOrderTask {
	return &NullableOrderTask{value: val, isSet: true}
}

func (v NullableOrderTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


