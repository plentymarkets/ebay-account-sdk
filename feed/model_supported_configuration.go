/*
Feed API

<p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

API version: v1.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package feed

import (
	"encoding/json"
)

// SupportedConfiguration An array that defines the configuration supported by this template. This includes specified properties and usage (whether the property is REQUIRED or OPTIONAL), and an optional default value.
type SupportedConfiguration struct {
	// The default value for the property. If a value is omitted from the schedule and a default value is supplied, the default value is used.
	DefaultValue *string `json:"defaultValue,omitempty"`
	// Properties supported by the template. Properties can include the following: scheduleStartDate: The timestamp that the report generation (subscription) begins. After this timestamp, the schedule status becomes active until either the scheduleEndDate occurs or the scheduleTemplate becomes inactive. Format: UTC yyyy-MM-ddTHHZ scheduleEndDate: The timestamp that the report generation (subscription) ends. After this date, the schedule status becomes INACTIVE. Format: UTC yyyy-MM-ddTHHZ schemaVersion: The schema version of the schedule templates feedType. This field is required if the feedType has a schema version. preferredTriggerDayOfMonth: The preferred day of the month to trigger the schedule. preferredTriggerDayOfWeek: The preferred day of the week to trigger the schedule. preferredTriggerHour: The preferred two-digit hour of the day to trigger the schedule. Format: UTC hhZ
	Property *string `json:"property,omitempty"`
	// Whether the specified property is REQUIRED or OPTIONAL. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:ConfigurationsUsageEnum'>eBay API documentation</a>
	Usage *string `json:"usage,omitempty"`
}

// NewSupportedConfiguration instantiates a new SupportedConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedConfiguration() *SupportedConfiguration {
	this := SupportedConfiguration{}
	return &this
}

// NewSupportedConfigurationWithDefaults instantiates a new SupportedConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedConfigurationWithDefaults() *SupportedConfiguration {
	this := SupportedConfiguration{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *SupportedConfiguration) GetDefaultValue() string {
	if o == nil || o.DefaultValue == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedConfiguration) GetDefaultValueOk() (*string, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *SupportedConfiguration) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *SupportedConfiguration) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *SupportedConfiguration) GetProperty() string {
	if o == nil || o.Property == nil {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedConfiguration) GetPropertyOk() (*string, bool) {
	if o == nil || o.Property == nil {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *SupportedConfiguration) HasProperty() bool {
	if o != nil && o.Property != nil {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *SupportedConfiguration) SetProperty(v string) {
	o.Property = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *SupportedConfiguration) GetUsage() string {
	if o == nil || o.Usage == nil {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedConfiguration) GetUsageOk() (*string, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *SupportedConfiguration) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *SupportedConfiguration) SetUsage(v string) {
	o.Usage = &v
}

func (o SupportedConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.Property != nil {
		toSerialize["property"] = o.Property
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableSupportedConfiguration struct {
	value *SupportedConfiguration
	isSet bool
}

func (v NullableSupportedConfiguration) Get() *SupportedConfiguration {
	return v.value
}

func (v *NullableSupportedConfiguration) Set(val *SupportedConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedConfiguration(val *SupportedConfiguration) *NullableSupportedConfiguration {
	return &NullableSupportedConfiguration{value: val, isSet: true}
}

func (v NullableSupportedConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


