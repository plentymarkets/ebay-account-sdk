/*
Feed API

<p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>

API version: v1.3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package feed

import (
	"encoding/json"
)

// ScheduleTemplateResponse The type that defines the fields for a paginated result set of available schedule templates. The response consists of 0 or more sequenced pages where each page has 0 or more items.
type ScheduleTemplateResponse struct {
	// The feed type of the schedule template. Note: When calling createSchedule and updateSchedule methods you must match the feed type specified by the schedule template (this feedType).
	FeedType *string `json:"feedType,omitempty"`
	// This field specifies how often the schedule is generated. If set to HALF_HOUR or ONE_HOUR, you cannot set a preferredTriggerHour using createSchedule or updateSchedule. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:FrequencyEnum'>eBay API documentation</a>
	Frequency *string `json:"frequency,omitempty"`
	// The template name provided by the template.
	Name *string `json:"name,omitempty"`
	// The ID of the template. Use this ID to create a schedule based on the properties of this schedule template.
	ScheduleTemplateId *string `json:"scheduleTemplateId,omitempty"`
	// The present status of the template. You cannot create or modify a schedule using a template with an INACTIVE status. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/feed/types/api:StatusEnum'>eBay API documentation</a>
	Status *string `json:"status,omitempty"`
	// An array of the configuration supported by this template.
	SupportedConfigurations *[]SupportedConfiguration `json:"supportedConfigurations,omitempty"`
}

// NewScheduleTemplateResponse instantiates a new ScheduleTemplateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleTemplateResponse() *ScheduleTemplateResponse {
	this := ScheduleTemplateResponse{}
	return &this
}

// NewScheduleTemplateResponseWithDefaults instantiates a new ScheduleTemplateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleTemplateResponseWithDefaults() *ScheduleTemplateResponse {
	this := ScheduleTemplateResponse{}
	return &this
}

// GetFeedType returns the FeedType field value if set, zero value otherwise.
func (o *ScheduleTemplateResponse) GetFeedType() string {
	if o == nil || o.FeedType == nil {
		var ret string
		return ret
	}
	return *o.FeedType
}

// GetFeedTypeOk returns a tuple with the FeedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTemplateResponse) GetFeedTypeOk() (*string, bool) {
	if o == nil || o.FeedType == nil {
		return nil, false
	}
	return o.FeedType, true
}

// HasFeedType returns a boolean if a field has been set.
func (o *ScheduleTemplateResponse) HasFeedType() bool {
	if o != nil && o.FeedType != nil {
		return true
	}

	return false
}

// SetFeedType gets a reference to the given string and assigns it to the FeedType field.
func (o *ScheduleTemplateResponse) SetFeedType(v string) {
	o.FeedType = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *ScheduleTemplateResponse) GetFrequency() string {
	if o == nil || o.Frequency == nil {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTemplateResponse) GetFrequencyOk() (*string, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *ScheduleTemplateResponse) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *ScheduleTemplateResponse) SetFrequency(v string) {
	o.Frequency = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScheduleTemplateResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTemplateResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ScheduleTemplateResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ScheduleTemplateResponse) SetName(v string) {
	o.Name = &v
}

// GetScheduleTemplateId returns the ScheduleTemplateId field value if set, zero value otherwise.
func (o *ScheduleTemplateResponse) GetScheduleTemplateId() string {
	if o == nil || o.ScheduleTemplateId == nil {
		var ret string
		return ret
	}
	return *o.ScheduleTemplateId
}

// GetScheduleTemplateIdOk returns a tuple with the ScheduleTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTemplateResponse) GetScheduleTemplateIdOk() (*string, bool) {
	if o == nil || o.ScheduleTemplateId == nil {
		return nil, false
	}
	return o.ScheduleTemplateId, true
}

// HasScheduleTemplateId returns a boolean if a field has been set.
func (o *ScheduleTemplateResponse) HasScheduleTemplateId() bool {
	if o != nil && o.ScheduleTemplateId != nil {
		return true
	}

	return false
}

// SetScheduleTemplateId gets a reference to the given string and assigns it to the ScheduleTemplateId field.
func (o *ScheduleTemplateResponse) SetScheduleTemplateId(v string) {
	o.ScheduleTemplateId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ScheduleTemplateResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTemplateResponse) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ScheduleTemplateResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ScheduleTemplateResponse) SetStatus(v string) {
	o.Status = &v
}

// GetSupportedConfigurations returns the SupportedConfigurations field value if set, zero value otherwise.
func (o *ScheduleTemplateResponse) GetSupportedConfigurations() []SupportedConfiguration {
	if o == nil || o.SupportedConfigurations == nil {
		var ret []SupportedConfiguration
		return ret
	}
	return *o.SupportedConfigurations
}

// GetSupportedConfigurationsOk returns a tuple with the SupportedConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTemplateResponse) GetSupportedConfigurationsOk() (*[]SupportedConfiguration, bool) {
	if o == nil || o.SupportedConfigurations == nil {
		return nil, false
	}
	return o.SupportedConfigurations, true
}

// HasSupportedConfigurations returns a boolean if a field has been set.
func (o *ScheduleTemplateResponse) HasSupportedConfigurations() bool {
	if o != nil && o.SupportedConfigurations != nil {
		return true
	}

	return false
}

// SetSupportedConfigurations gets a reference to the given []SupportedConfiguration and assigns it to the SupportedConfigurations field.
func (o *ScheduleTemplateResponse) SetSupportedConfigurations(v []SupportedConfiguration) {
	o.SupportedConfigurations = &v
}

func (o ScheduleTemplateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeedType != nil {
		toSerialize["feedType"] = o.FeedType
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ScheduleTemplateId != nil {
		toSerialize["scheduleTemplateId"] = o.ScheduleTemplateId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.SupportedConfigurations != nil {
		toSerialize["supportedConfigurations"] = o.SupportedConfigurations
	}
	return json.Marshal(toSerialize)
}

type NullableScheduleTemplateResponse struct {
	value *ScheduleTemplateResponse
	isSet bool
}

func (v NullableScheduleTemplateResponse) Get() *ScheduleTemplateResponse {
	return v.value
}

func (v *NullableScheduleTemplateResponse) Set(val *ScheduleTemplateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleTemplateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleTemplateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleTemplateResponse(val *ScheduleTemplateResponse) *NullableScheduleTemplateResponse {
	return &NullableScheduleTemplateResponse{value: val, isSet: true}
}

func (v NullableScheduleTemplateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleTemplateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


