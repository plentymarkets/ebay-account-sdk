/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ebayaccount

import (
	"encoding/json"
)

// SellingLimit Defines the selling limit applied to an eBay seller's account.
type SellingLimit struct {
	Amount *Amount `json:"amount,omitempty"`
	// The maximum quantity of items that can be listed by the seller per calendar month. Note that for a listing with variations, all of the items listed in the variation count as individual items.
	Quantity *int32 `json:"quantity,omitempty"`
}

// NewSellingLimit instantiates a new SellingLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSellingLimit() *SellingLimit {
	this := SellingLimit{}
	return &this
}

// NewSellingLimitWithDefaults instantiates a new SellingLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellingLimitWithDefaults() *SellingLimit {
	this := SellingLimit{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *SellingLimit) GetAmount() Amount {
	if o == nil || o.Amount == nil {
		var ret Amount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellingLimit) GetAmountOk() (*Amount, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *SellingLimit) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Amount and assigns it to the Amount field.
func (o *SellingLimit) SetAmount(v Amount) {
	o.Amount = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *SellingLimit) GetQuantity() int32 {
	if o == nil || o.Quantity == nil {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellingLimit) GetQuantityOk() (*int32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *SellingLimit) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *SellingLimit) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o SellingLimit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullableSellingLimit struct {
	value *SellingLimit
	isSet bool
}

func (v NullableSellingLimit) Get() *SellingLimit {
	return v.value
}

func (v *NullableSellingLimit) Set(val *SellingLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableSellingLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableSellingLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSellingLimit(val *SellingLimit) *NullableSellingLimit {
	return &NullableSellingLimit{value: val, isSet: true}
}

func (v NullableSellingLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSellingLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


