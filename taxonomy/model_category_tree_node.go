/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// CategoryTreeNode This type contains information about all nodes of a category tree or subtree hierarchy, including and below the specified Category, down to the leaf nodes. It is a recursive structure.
type CategoryTreeNode struct {
	Category *Category `json:"category,omitempty"`
	// The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
	CategoryTreeNodeLevel *int32 `json:"categoryTreeNodeLevel,omitempty"`
	// An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).
	ChildCategoryTreeNodes *[]CategoryTreeNode `json:"childCategoryTreeNodes,omitempty"`
	// A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.
	LeafCategoryTreeNode *bool `json:"leafCategoryTreeNode,omitempty"`
	// The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.
	ParentCategoryTreeNodeHref *string `json:"parentCategoryTreeNodeHref,omitempty"`
}

// NewCategoryTreeNode instantiates a new CategoryTreeNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryTreeNode() *CategoryTreeNode {
	this := CategoryTreeNode{}
	return &this
}

// NewCategoryTreeNodeWithDefaults instantiates a new CategoryTreeNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryTreeNodeWithDefaults() *CategoryTreeNode {
	this := CategoryTreeNode{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CategoryTreeNode) GetCategory() Category {
	if o == nil || o.Category == nil {
		var ret Category
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryTreeNode) GetCategoryOk() (*Category, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CategoryTreeNode) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given Category and assigns it to the Category field.
func (o *CategoryTreeNode) SetCategory(v Category) {
	o.Category = &v
}

// GetCategoryTreeNodeLevel returns the CategoryTreeNodeLevel field value if set, zero value otherwise.
func (o *CategoryTreeNode) GetCategoryTreeNodeLevel() int32 {
	if o == nil || o.CategoryTreeNodeLevel == nil {
		var ret int32
		return ret
	}
	return *o.CategoryTreeNodeLevel
}

// GetCategoryTreeNodeLevelOk returns a tuple with the CategoryTreeNodeLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryTreeNode) GetCategoryTreeNodeLevelOk() (*int32, bool) {
	if o == nil || o.CategoryTreeNodeLevel == nil {
		return nil, false
	}
	return o.CategoryTreeNodeLevel, true
}

// HasCategoryTreeNodeLevel returns a boolean if a field has been set.
func (o *CategoryTreeNode) HasCategoryTreeNodeLevel() bool {
	if o != nil && o.CategoryTreeNodeLevel != nil {
		return true
	}

	return false
}

// SetCategoryTreeNodeLevel gets a reference to the given int32 and assigns it to the CategoryTreeNodeLevel field.
func (o *CategoryTreeNode) SetCategoryTreeNodeLevel(v int32) {
	o.CategoryTreeNodeLevel = &v
}

// GetChildCategoryTreeNodes returns the ChildCategoryTreeNodes field value if set, zero value otherwise.
func (o *CategoryTreeNode) GetChildCategoryTreeNodes() []CategoryTreeNode {
	if o == nil || o.ChildCategoryTreeNodes == nil {
		var ret []CategoryTreeNode
		return ret
	}
	return *o.ChildCategoryTreeNodes
}

// GetChildCategoryTreeNodesOk returns a tuple with the ChildCategoryTreeNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryTreeNode) GetChildCategoryTreeNodesOk() (*[]CategoryTreeNode, bool) {
	if o == nil || o.ChildCategoryTreeNodes == nil {
		return nil, false
	}
	return o.ChildCategoryTreeNodes, true
}

// HasChildCategoryTreeNodes returns a boolean if a field has been set.
func (o *CategoryTreeNode) HasChildCategoryTreeNodes() bool {
	if o != nil && o.ChildCategoryTreeNodes != nil {
		return true
	}

	return false
}

// SetChildCategoryTreeNodes gets a reference to the given []CategoryTreeNode and assigns it to the ChildCategoryTreeNodes field.
func (o *CategoryTreeNode) SetChildCategoryTreeNodes(v []CategoryTreeNode) {
	o.ChildCategoryTreeNodes = &v
}

// GetLeafCategoryTreeNode returns the LeafCategoryTreeNode field value if set, zero value otherwise.
func (o *CategoryTreeNode) GetLeafCategoryTreeNode() bool {
	if o == nil || o.LeafCategoryTreeNode == nil {
		var ret bool
		return ret
	}
	return *o.LeafCategoryTreeNode
}

// GetLeafCategoryTreeNodeOk returns a tuple with the LeafCategoryTreeNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryTreeNode) GetLeafCategoryTreeNodeOk() (*bool, bool) {
	if o == nil || o.LeafCategoryTreeNode == nil {
		return nil, false
	}
	return o.LeafCategoryTreeNode, true
}

// HasLeafCategoryTreeNode returns a boolean if a field has been set.
func (o *CategoryTreeNode) HasLeafCategoryTreeNode() bool {
	if o != nil && o.LeafCategoryTreeNode != nil {
		return true
	}

	return false
}

// SetLeafCategoryTreeNode gets a reference to the given bool and assigns it to the LeafCategoryTreeNode field.
func (o *CategoryTreeNode) SetLeafCategoryTreeNode(v bool) {
	o.LeafCategoryTreeNode = &v
}

// GetParentCategoryTreeNodeHref returns the ParentCategoryTreeNodeHref field value if set, zero value otherwise.
func (o *CategoryTreeNode) GetParentCategoryTreeNodeHref() string {
	if o == nil || o.ParentCategoryTreeNodeHref == nil {
		var ret string
		return ret
	}
	return *o.ParentCategoryTreeNodeHref
}

// GetParentCategoryTreeNodeHrefOk returns a tuple with the ParentCategoryTreeNodeHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryTreeNode) GetParentCategoryTreeNodeHrefOk() (*string, bool) {
	if o == nil || o.ParentCategoryTreeNodeHref == nil {
		return nil, false
	}
	return o.ParentCategoryTreeNodeHref, true
}

// HasParentCategoryTreeNodeHref returns a boolean if a field has been set.
func (o *CategoryTreeNode) HasParentCategoryTreeNodeHref() bool {
	if o != nil && o.ParentCategoryTreeNodeHref != nil {
		return true
	}

	return false
}

// SetParentCategoryTreeNodeHref gets a reference to the given string and assigns it to the ParentCategoryTreeNodeHref field.
func (o *CategoryTreeNode) SetParentCategoryTreeNodeHref(v string) {
	o.ParentCategoryTreeNodeHref = &v
}

func (o CategoryTreeNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.CategoryTreeNodeLevel != nil {
		toSerialize["categoryTreeNodeLevel"] = o.CategoryTreeNodeLevel
	}
	if o.ChildCategoryTreeNodes != nil {
		toSerialize["childCategoryTreeNodes"] = o.ChildCategoryTreeNodes
	}
	if o.LeafCategoryTreeNode != nil {
		toSerialize["leafCategoryTreeNode"] = o.LeafCategoryTreeNode
	}
	if o.ParentCategoryTreeNodeHref != nil {
		toSerialize["parentCategoryTreeNodeHref"] = o.ParentCategoryTreeNodeHref
	}
	return json.Marshal(toSerialize)
}

type NullableCategoryTreeNode struct {
	value *CategoryTreeNode
	isSet bool
}

func (v NullableCategoryTreeNode) Get() *CategoryTreeNode {
	return v.value
}

func (v *NullableCategoryTreeNode) Set(val *CategoryTreeNode) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryTreeNode) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryTreeNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryTreeNode(val *CategoryTreeNode) *NullableCategoryTreeNode {
	return &NullableCategoryTreeNode{value: val, isSet: true}
}

func (v NullableCategoryTreeNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryTreeNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


