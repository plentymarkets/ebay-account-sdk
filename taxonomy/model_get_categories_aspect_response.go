/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// GetCategoriesAspectResponse struct for GetCategoriesAspectResponse
type GetCategoriesAspectResponse struct {
	// The unique identifier of the eBay category tree being requested.
	CategoryTreeId *string `json:"categoryTreeId,omitempty"`
	// The version of the category tree that is returned in the categoryTreeId field.
	CategoryTreeVersion *string `json:"categoryTreeVersion,omitempty"`
	// An array of aspects that are appropriate or necessary for accurately describing items in a particular leaf category.
	CategoryAspects *[]CategoryAspect `json:"categoryAspects,omitempty"`
}

// NewGetCategoriesAspectResponse instantiates a new GetCategoriesAspectResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCategoriesAspectResponse() *GetCategoriesAspectResponse {
	this := GetCategoriesAspectResponse{}
	return &this
}

// NewGetCategoriesAspectResponseWithDefaults instantiates a new GetCategoriesAspectResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCategoriesAspectResponseWithDefaults() *GetCategoriesAspectResponse {
	this := GetCategoriesAspectResponse{}
	return &this
}

// GetCategoryTreeId returns the CategoryTreeId field value if set, zero value otherwise.
func (o *GetCategoriesAspectResponse) GetCategoryTreeId() string {
	if o == nil || o.CategoryTreeId == nil {
		var ret string
		return ret
	}
	return *o.CategoryTreeId
}

// GetCategoryTreeIdOk returns a tuple with the CategoryTreeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCategoriesAspectResponse) GetCategoryTreeIdOk() (*string, bool) {
	if o == nil || o.CategoryTreeId == nil {
		return nil, false
	}
	return o.CategoryTreeId, true
}

// HasCategoryTreeId returns a boolean if a field has been set.
func (o *GetCategoriesAspectResponse) HasCategoryTreeId() bool {
	if o != nil && o.CategoryTreeId != nil {
		return true
	}

	return false
}

// SetCategoryTreeId gets a reference to the given string and assigns it to the CategoryTreeId field.
func (o *GetCategoriesAspectResponse) SetCategoryTreeId(v string) {
	o.CategoryTreeId = &v
}

// GetCategoryTreeVersion returns the CategoryTreeVersion field value if set, zero value otherwise.
func (o *GetCategoriesAspectResponse) GetCategoryTreeVersion() string {
	if o == nil || o.CategoryTreeVersion == nil {
		var ret string
		return ret
	}
	return *o.CategoryTreeVersion
}

// GetCategoryTreeVersionOk returns a tuple with the CategoryTreeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCategoriesAspectResponse) GetCategoryTreeVersionOk() (*string, bool) {
	if o == nil || o.CategoryTreeVersion == nil {
		return nil, false
	}
	return o.CategoryTreeVersion, true
}

// HasCategoryTreeVersion returns a boolean if a field has been set.
func (o *GetCategoriesAspectResponse) HasCategoryTreeVersion() bool {
	if o != nil && o.CategoryTreeVersion != nil {
		return true
	}

	return false
}

// SetCategoryTreeVersion gets a reference to the given string and assigns it to the CategoryTreeVersion field.
func (o *GetCategoriesAspectResponse) SetCategoryTreeVersion(v string) {
	o.CategoryTreeVersion = &v
}

// GetCategoryAspects returns the CategoryAspects field value if set, zero value otherwise.
func (o *GetCategoriesAspectResponse) GetCategoryAspects() []CategoryAspect {
	if o == nil || o.CategoryAspects == nil {
		var ret []CategoryAspect
		return ret
	}
	return *o.CategoryAspects
}

// GetCategoryAspectsOk returns a tuple with the CategoryAspects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCategoriesAspectResponse) GetCategoryAspectsOk() (*[]CategoryAspect, bool) {
	if o == nil || o.CategoryAspects == nil {
		return nil, false
	}
	return o.CategoryAspects, true
}

// HasCategoryAspects returns a boolean if a field has been set.
func (o *GetCategoriesAspectResponse) HasCategoryAspects() bool {
	if o != nil && o.CategoryAspects != nil {
		return true
	}

	return false
}

// SetCategoryAspects gets a reference to the given []CategoryAspect and assigns it to the CategoryAspects field.
func (o *GetCategoriesAspectResponse) SetCategoryAspects(v []CategoryAspect) {
	o.CategoryAspects = &v
}

func (o GetCategoriesAspectResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategoryTreeId != nil {
		toSerialize["categoryTreeId"] = o.CategoryTreeId
	}
	if o.CategoryTreeVersion != nil {
		toSerialize["categoryTreeVersion"] = o.CategoryTreeVersion
	}
	if o.CategoryAspects != nil {
		toSerialize["categoryAspects"] = o.CategoryAspects
	}
	return json.Marshal(toSerialize)
}

type NullableGetCategoriesAspectResponse struct {
	value *GetCategoriesAspectResponse
	isSet bool
}

func (v NullableGetCategoriesAspectResponse) Get() *GetCategoriesAspectResponse {
	return v.value
}

func (v *NullableGetCategoriesAspectResponse) Set(val *GetCategoriesAspectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCategoriesAspectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCategoriesAspectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCategoriesAspectResponse(val *GetCategoriesAspectResponse) *NullableGetCategoriesAspectResponse {
	return &NullableGetCategoriesAspectResponse{value: val, isSet: true}
}

func (v NullableGetCategoriesAspectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCategoriesAspectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


