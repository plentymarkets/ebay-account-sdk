/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// AspectMetadata This type is the container type for the response payload of the getItemAspectsForCategory call.
type AspectMetadata struct {
	// A list of item aspects (for example, color) that are appropriate or necessary for accurately describing items in a particular leaf category. Each category has a different set of aspects and different requirements for aspect values. Sellers are required or encouraged to provide one or more acceptable values for each aspect when offering an item in that category on eBay.
	Aspects *[]Aspect `json:"aspects,omitempty"`
}

// NewAspectMetadata instantiates a new AspectMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAspectMetadata() *AspectMetadata {
	this := AspectMetadata{}
	return &this
}

// NewAspectMetadataWithDefaults instantiates a new AspectMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAspectMetadataWithDefaults() *AspectMetadata {
	this := AspectMetadata{}
	return &this
}

// GetAspects returns the Aspects field value if set, zero value otherwise.
func (o *AspectMetadata) GetAspects() []Aspect {
	if o == nil || o.Aspects == nil {
		var ret []Aspect
		return ret
	}
	return *o.Aspects
}

// GetAspectsOk returns a tuple with the Aspects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AspectMetadata) GetAspectsOk() (*[]Aspect, bool) {
	if o == nil || o.Aspects == nil {
		return nil, false
	}
	return o.Aspects, true
}

// HasAspects returns a boolean if a field has been set.
func (o *AspectMetadata) HasAspects() bool {
	if o != nil && o.Aspects != nil {
		return true
	}

	return false
}

// SetAspects gets a reference to the given []Aspect and assigns it to the Aspects field.
func (o *AspectMetadata) SetAspects(v []Aspect) {
	o.Aspects = &v
}

func (o AspectMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aspects != nil {
		toSerialize["aspects"] = o.Aspects
	}
	return json.Marshal(toSerialize)
}

type NullableAspectMetadata struct {
	value *AspectMetadata
	isSet bool
}

func (v NullableAspectMetadata) Get() *AspectMetadata {
	return v.value
}

func (v *NullableAspectMetadata) Set(val *AspectMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAspectMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAspectMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAspectMetadata(val *AspectMetadata) *NullableAspectMetadata {
	return &NullableAspectMetadata{value: val, isSet: true}
}

func (v NullableAspectMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAspectMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


