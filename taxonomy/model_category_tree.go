/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// CategoryTree This type contains information about all nodes of a specified eBay category tree.
type CategoryTree struct {
	// A list of one or more identifiers of the eBay marketplaces that use this category tree.
	ApplicableMarketplaceIds *[]string `json:"applicableMarketplaceIds,omitempty"`
	// The unique identifier of this eBay category tree.
	CategoryTreeId *string `json:"categoryTreeId,omitempty"`
	// The version of this category tree. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
	CategoryTreeVersion *string `json:"categoryTreeVersion,omitempty"`
	RootCategoryNode *CategoryTreeNode `json:"rootCategoryNode,omitempty"`
}

// NewCategoryTree instantiates a new CategoryTree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryTree() *CategoryTree {
	this := CategoryTree{}
	return &this
}

// NewCategoryTreeWithDefaults instantiates a new CategoryTree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryTreeWithDefaults() *CategoryTree {
	this := CategoryTree{}
	return &this
}

// GetApplicableMarketplaceIds returns the ApplicableMarketplaceIds field value if set, zero value otherwise.
func (o *CategoryTree) GetApplicableMarketplaceIds() []string {
	if o == nil || o.ApplicableMarketplaceIds == nil {
		var ret []string
		return ret
	}
	return *o.ApplicableMarketplaceIds
}

// GetApplicableMarketplaceIdsOk returns a tuple with the ApplicableMarketplaceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryTree) GetApplicableMarketplaceIdsOk() (*[]string, bool) {
	if o == nil || o.ApplicableMarketplaceIds == nil {
		return nil, false
	}
	return o.ApplicableMarketplaceIds, true
}

// HasApplicableMarketplaceIds returns a boolean if a field has been set.
func (o *CategoryTree) HasApplicableMarketplaceIds() bool {
	if o != nil && o.ApplicableMarketplaceIds != nil {
		return true
	}

	return false
}

// SetApplicableMarketplaceIds gets a reference to the given []string and assigns it to the ApplicableMarketplaceIds field.
func (o *CategoryTree) SetApplicableMarketplaceIds(v []string) {
	o.ApplicableMarketplaceIds = &v
}

// GetCategoryTreeId returns the CategoryTreeId field value if set, zero value otherwise.
func (o *CategoryTree) GetCategoryTreeId() string {
	if o == nil || o.CategoryTreeId == nil {
		var ret string
		return ret
	}
	return *o.CategoryTreeId
}

// GetCategoryTreeIdOk returns a tuple with the CategoryTreeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryTree) GetCategoryTreeIdOk() (*string, bool) {
	if o == nil || o.CategoryTreeId == nil {
		return nil, false
	}
	return o.CategoryTreeId, true
}

// HasCategoryTreeId returns a boolean if a field has been set.
func (o *CategoryTree) HasCategoryTreeId() bool {
	if o != nil && o.CategoryTreeId != nil {
		return true
	}

	return false
}

// SetCategoryTreeId gets a reference to the given string and assigns it to the CategoryTreeId field.
func (o *CategoryTree) SetCategoryTreeId(v string) {
	o.CategoryTreeId = &v
}

// GetCategoryTreeVersion returns the CategoryTreeVersion field value if set, zero value otherwise.
func (o *CategoryTree) GetCategoryTreeVersion() string {
	if o == nil || o.CategoryTreeVersion == nil {
		var ret string
		return ret
	}
	return *o.CategoryTreeVersion
}

// GetCategoryTreeVersionOk returns a tuple with the CategoryTreeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryTree) GetCategoryTreeVersionOk() (*string, bool) {
	if o == nil || o.CategoryTreeVersion == nil {
		return nil, false
	}
	return o.CategoryTreeVersion, true
}

// HasCategoryTreeVersion returns a boolean if a field has been set.
func (o *CategoryTree) HasCategoryTreeVersion() bool {
	if o != nil && o.CategoryTreeVersion != nil {
		return true
	}

	return false
}

// SetCategoryTreeVersion gets a reference to the given string and assigns it to the CategoryTreeVersion field.
func (o *CategoryTree) SetCategoryTreeVersion(v string) {
	o.CategoryTreeVersion = &v
}

// GetRootCategoryNode returns the RootCategoryNode field value if set, zero value otherwise.
func (o *CategoryTree) GetRootCategoryNode() CategoryTreeNode {
	if o == nil || o.RootCategoryNode == nil {
		var ret CategoryTreeNode
		return ret
	}
	return *o.RootCategoryNode
}

// GetRootCategoryNodeOk returns a tuple with the RootCategoryNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryTree) GetRootCategoryNodeOk() (*CategoryTreeNode, bool) {
	if o == nil || o.RootCategoryNode == nil {
		return nil, false
	}
	return o.RootCategoryNode, true
}

// HasRootCategoryNode returns a boolean if a field has been set.
func (o *CategoryTree) HasRootCategoryNode() bool {
	if o != nil && o.RootCategoryNode != nil {
		return true
	}

	return false
}

// SetRootCategoryNode gets a reference to the given CategoryTreeNode and assigns it to the RootCategoryNode field.
func (o *CategoryTree) SetRootCategoryNode(v CategoryTreeNode) {
	o.RootCategoryNode = &v
}

func (o CategoryTree) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplicableMarketplaceIds != nil {
		toSerialize["applicableMarketplaceIds"] = o.ApplicableMarketplaceIds
	}
	if o.CategoryTreeId != nil {
		toSerialize["categoryTreeId"] = o.CategoryTreeId
	}
	if o.CategoryTreeVersion != nil {
		toSerialize["categoryTreeVersion"] = o.CategoryTreeVersion
	}
	if o.RootCategoryNode != nil {
		toSerialize["rootCategoryNode"] = o.RootCategoryNode
	}
	return json.Marshal(toSerialize)
}

type NullableCategoryTree struct {
	value *CategoryTree
	isSet bool
}

func (v NullableCategoryTree) Get() *CategoryTree {
	return v.value
}

func (v *NullableCategoryTree) Set(val *CategoryTree) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryTree) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryTree(val *CategoryTree) *NullableCategoryTree {
	return &NullableCategoryTree{value: val, isSet: true}
}

func (v NullableCategoryTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


