/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// CompatibilityProperty This type is used by the compatibilityProperties array that is returned in the getCompatibilityProperties call. The compatibilityProperties container consists of an array of all compatible vehicle properties applicable to the specified eBay marketplace and eBay category ID.
type CompatibilityProperty struct {
	// This is the actual name of the compatible vehicle property as it is known on the specified eBay marketplace and in the eBay category. This is the string value that should be used in the compatibility_property and filter query parameters of a getCompatibilityPropertyValues request URI. Typical vehicle properties are 'Make', 'Model', 'Year', 'Engine', and 'Trim', but will vary based on the eBay marketplace and the eBay category.
	Name *string `json:"name,omitempty"`
	// This is the localized name of the compatible vehicle property. The language that is used will depend on the user making the call, or based on the language specified if the Content-Language HTTP header is used. In some instances, the string value in this field may be the same as the string in the corresponding name field.
	LocalizedName *string `json:"localizedName,omitempty"`
}

// NewCompatibilityProperty instantiates a new CompatibilityProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompatibilityProperty() *CompatibilityProperty {
	this := CompatibilityProperty{}
	return &this
}

// NewCompatibilityPropertyWithDefaults instantiates a new CompatibilityProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompatibilityPropertyWithDefaults() *CompatibilityProperty {
	this := CompatibilityProperty{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CompatibilityProperty) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityProperty) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CompatibilityProperty) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CompatibilityProperty) SetName(v string) {
	o.Name = &v
}

// GetLocalizedName returns the LocalizedName field value if set, zero value otherwise.
func (o *CompatibilityProperty) GetLocalizedName() string {
	if o == nil || o.LocalizedName == nil {
		var ret string
		return ret
	}
	return *o.LocalizedName
}

// GetLocalizedNameOk returns a tuple with the LocalizedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityProperty) GetLocalizedNameOk() (*string, bool) {
	if o == nil || o.LocalizedName == nil {
		return nil, false
	}
	return o.LocalizedName, true
}

// HasLocalizedName returns a boolean if a field has been set.
func (o *CompatibilityProperty) HasLocalizedName() bool {
	if o != nil && o.LocalizedName != nil {
		return true
	}

	return false
}

// SetLocalizedName gets a reference to the given string and assigns it to the LocalizedName field.
func (o *CompatibilityProperty) SetLocalizedName(v string) {
	o.LocalizedName = &v
}

func (o CompatibilityProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.LocalizedName != nil {
		toSerialize["localizedName"] = o.LocalizedName
	}
	return json.Marshal(toSerialize)
}

type NullableCompatibilityProperty struct {
	value *CompatibilityProperty
	isSet bool
}

func (v NullableCompatibilityProperty) Get() *CompatibilityProperty {
	return v.value
}

func (v *NullableCompatibilityProperty) Set(val *CompatibilityProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableCompatibilityProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableCompatibilityProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompatibilityProperty(val *CompatibilityProperty) *NullableCompatibilityProperty {
	return &NullableCompatibilityProperty{value: val, isSet: true}
}

func (v NullableCompatibilityProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompatibilityProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


