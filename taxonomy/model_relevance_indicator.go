/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// RelevanceIndicator The relevance of this aspect. This field is returned if eBay has data on how many searches have been performed for listings in the category using this item aspect. Note: This container is restricted to applications that have been granted permission to access this feature. You must submit an App Check ticket to request this access. In the App Check form, add a note to the Application Title/Summary and/or Application Details fields that you want access to 'Buyer Demand Data' in the Taxonomy API.
type RelevanceIndicator struct {
	// The number of recent searches (based on 30 days of data) for the aspect.
	SearchCount *int32 `json:"searchCount,omitempty"`
}

// NewRelevanceIndicator instantiates a new RelevanceIndicator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelevanceIndicator() *RelevanceIndicator {
	this := RelevanceIndicator{}
	return &this
}

// NewRelevanceIndicatorWithDefaults instantiates a new RelevanceIndicator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelevanceIndicatorWithDefaults() *RelevanceIndicator {
	this := RelevanceIndicator{}
	return &this
}

// GetSearchCount returns the SearchCount field value if set, zero value otherwise.
func (o *RelevanceIndicator) GetSearchCount() int32 {
	if o == nil || o.SearchCount == nil {
		var ret int32
		return ret
	}
	return *o.SearchCount
}

// GetSearchCountOk returns a tuple with the SearchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelevanceIndicator) GetSearchCountOk() (*int32, bool) {
	if o == nil || o.SearchCount == nil {
		return nil, false
	}
	return o.SearchCount, true
}

// HasSearchCount returns a boolean if a field has been set.
func (o *RelevanceIndicator) HasSearchCount() bool {
	if o != nil && o.SearchCount != nil {
		return true
	}

	return false
}

// SetSearchCount gets a reference to the given int32 and assigns it to the SearchCount field.
func (o *RelevanceIndicator) SetSearchCount(v int32) {
	o.SearchCount = &v
}

func (o RelevanceIndicator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SearchCount != nil {
		toSerialize["searchCount"] = o.SearchCount
	}
	return json.Marshal(toSerialize)
}

type NullableRelevanceIndicator struct {
	value *RelevanceIndicator
	isSet bool
}

func (v NullableRelevanceIndicator) Get() *RelevanceIndicator {
	return v.value
}

func (v *NullableRelevanceIndicator) Set(val *RelevanceIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullableRelevanceIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableRelevanceIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelevanceIndicator(val *RelevanceIndicator) *NullableRelevanceIndicator {
	return &NullableRelevanceIndicator{value: val, isSet: true}
}

func (v NullableRelevanceIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelevanceIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


