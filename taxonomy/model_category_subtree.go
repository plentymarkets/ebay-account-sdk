/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// CategorySubtree This type contains information about a particular subtree of a specified eBay category tree. A category subtree consists of a non-root node of the category tree, and all of its descendants down to the leaf nodes.
type CategorySubtree struct {
	CategorySubtreeNode *CategoryTreeNode `json:"categorySubtreeNode,omitempty"`
	// The unique identifier of the eBay category tree to which this subtree belongs.
	CategoryTreeId *string `json:"categoryTreeId,omitempty"`
	// The version of the category tree identified by categoryTreeId. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
	CategoryTreeVersion *string `json:"categoryTreeVersion,omitempty"`
}

// NewCategorySubtree instantiates a new CategorySubtree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategorySubtree() *CategorySubtree {
	this := CategorySubtree{}
	return &this
}

// NewCategorySubtreeWithDefaults instantiates a new CategorySubtree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategorySubtreeWithDefaults() *CategorySubtree {
	this := CategorySubtree{}
	return &this
}

// GetCategorySubtreeNode returns the CategorySubtreeNode field value if set, zero value otherwise.
func (o *CategorySubtree) GetCategorySubtreeNode() CategoryTreeNode {
	if o == nil || o.CategorySubtreeNode == nil {
		var ret CategoryTreeNode
		return ret
	}
	return *o.CategorySubtreeNode
}

// GetCategorySubtreeNodeOk returns a tuple with the CategorySubtreeNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySubtree) GetCategorySubtreeNodeOk() (*CategoryTreeNode, bool) {
	if o == nil || o.CategorySubtreeNode == nil {
		return nil, false
	}
	return o.CategorySubtreeNode, true
}

// HasCategorySubtreeNode returns a boolean if a field has been set.
func (o *CategorySubtree) HasCategorySubtreeNode() bool {
	if o != nil && o.CategorySubtreeNode != nil {
		return true
	}

	return false
}

// SetCategorySubtreeNode gets a reference to the given CategoryTreeNode and assigns it to the CategorySubtreeNode field.
func (o *CategorySubtree) SetCategorySubtreeNode(v CategoryTreeNode) {
	o.CategorySubtreeNode = &v
}

// GetCategoryTreeId returns the CategoryTreeId field value if set, zero value otherwise.
func (o *CategorySubtree) GetCategoryTreeId() string {
	if o == nil || o.CategoryTreeId == nil {
		var ret string
		return ret
	}
	return *o.CategoryTreeId
}

// GetCategoryTreeIdOk returns a tuple with the CategoryTreeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySubtree) GetCategoryTreeIdOk() (*string, bool) {
	if o == nil || o.CategoryTreeId == nil {
		return nil, false
	}
	return o.CategoryTreeId, true
}

// HasCategoryTreeId returns a boolean if a field has been set.
func (o *CategorySubtree) HasCategoryTreeId() bool {
	if o != nil && o.CategoryTreeId != nil {
		return true
	}

	return false
}

// SetCategoryTreeId gets a reference to the given string and assigns it to the CategoryTreeId field.
func (o *CategorySubtree) SetCategoryTreeId(v string) {
	o.CategoryTreeId = &v
}

// GetCategoryTreeVersion returns the CategoryTreeVersion field value if set, zero value otherwise.
func (o *CategorySubtree) GetCategoryTreeVersion() string {
	if o == nil || o.CategoryTreeVersion == nil {
		var ret string
		return ret
	}
	return *o.CategoryTreeVersion
}

// GetCategoryTreeVersionOk returns a tuple with the CategoryTreeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySubtree) GetCategoryTreeVersionOk() (*string, bool) {
	if o == nil || o.CategoryTreeVersion == nil {
		return nil, false
	}
	return o.CategoryTreeVersion, true
}

// HasCategoryTreeVersion returns a boolean if a field has been set.
func (o *CategorySubtree) HasCategoryTreeVersion() bool {
	if o != nil && o.CategoryTreeVersion != nil {
		return true
	}

	return false
}

// SetCategoryTreeVersion gets a reference to the given string and assigns it to the CategoryTreeVersion field.
func (o *CategorySubtree) SetCategoryTreeVersion(v string) {
	o.CategoryTreeVersion = &v
}

func (o CategorySubtree) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategorySubtreeNode != nil {
		toSerialize["categorySubtreeNode"] = o.CategorySubtreeNode
	}
	if o.CategoryTreeId != nil {
		toSerialize["categoryTreeId"] = o.CategoryTreeId
	}
	if o.CategoryTreeVersion != nil {
		toSerialize["categoryTreeVersion"] = o.CategoryTreeVersion
	}
	return json.Marshal(toSerialize)
}

type NullableCategorySubtree struct {
	value *CategorySubtree
	isSet bool
}

func (v NullableCategorySubtree) Get() *CategorySubtree {
	return v.value
}

func (v *NullableCategorySubtree) Set(val *CategorySubtree) {
	v.value = val
	v.isSet = true
}

func (v NullableCategorySubtree) IsSet() bool {
	return v.isSet
}

func (v *NullableCategorySubtree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategorySubtree(val *CategorySubtree) *NullableCategorySubtree {
	return &NullableCategorySubtree{value: val, isSet: true}
}

func (v NullableCategorySubtree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategorySubtree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


