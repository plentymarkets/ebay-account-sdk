/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// GetCompatibilityMetadataResponse This type is used by the base response of the getCompatibilityProperties method.
type GetCompatibilityMetadataResponse struct {
	// This container consists of an array of all compatible vehicle properties applicable to the specified eBay marketplace and eBay category ID.
	CompatibilityProperties *[]CompatibilityProperty `json:"compatibilityProperties,omitempty"`
}

// NewGetCompatibilityMetadataResponse instantiates a new GetCompatibilityMetadataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCompatibilityMetadataResponse() *GetCompatibilityMetadataResponse {
	this := GetCompatibilityMetadataResponse{}
	return &this
}

// NewGetCompatibilityMetadataResponseWithDefaults instantiates a new GetCompatibilityMetadataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCompatibilityMetadataResponseWithDefaults() *GetCompatibilityMetadataResponse {
	this := GetCompatibilityMetadataResponse{}
	return &this
}

// GetCompatibilityProperties returns the CompatibilityProperties field value if set, zero value otherwise.
func (o *GetCompatibilityMetadataResponse) GetCompatibilityProperties() []CompatibilityProperty {
	if o == nil || o.CompatibilityProperties == nil {
		var ret []CompatibilityProperty
		return ret
	}
	return *o.CompatibilityProperties
}

// GetCompatibilityPropertiesOk returns a tuple with the CompatibilityProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCompatibilityMetadataResponse) GetCompatibilityPropertiesOk() (*[]CompatibilityProperty, bool) {
	if o == nil || o.CompatibilityProperties == nil {
		return nil, false
	}
	return o.CompatibilityProperties, true
}

// HasCompatibilityProperties returns a boolean if a field has been set.
func (o *GetCompatibilityMetadataResponse) HasCompatibilityProperties() bool {
	if o != nil && o.CompatibilityProperties != nil {
		return true
	}

	return false
}

// SetCompatibilityProperties gets a reference to the given []CompatibilityProperty and assigns it to the CompatibilityProperties field.
func (o *GetCompatibilityMetadataResponse) SetCompatibilityProperties(v []CompatibilityProperty) {
	o.CompatibilityProperties = &v
}

func (o GetCompatibilityMetadataResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompatibilityProperties != nil {
		toSerialize["compatibilityProperties"] = o.CompatibilityProperties
	}
	return json.Marshal(toSerialize)
}

type NullableGetCompatibilityMetadataResponse struct {
	value *GetCompatibilityMetadataResponse
	isSet bool
}

func (v NullableGetCompatibilityMetadataResponse) Get() *GetCompatibilityMetadataResponse {
	return v.value
}

func (v *NullableGetCompatibilityMetadataResponse) Set(val *GetCompatibilityMetadataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCompatibilityMetadataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCompatibilityMetadataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCompatibilityMetadataResponse(val *GetCompatibilityMetadataResponse) *NullableGetCompatibilityMetadataResponse {
	return &NullableGetCompatibilityMetadataResponse{value: val, isSet: true}
}

func (v NullableGetCompatibilityMetadataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCompatibilityMetadataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


