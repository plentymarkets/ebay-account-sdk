/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// AspectValue This type contains a valid value for an aspect, along with any constraints on the occurrence of that value.
type AspectValue struct {
	// The localized value of this aspect. Note: This value is always localized for the specified marketplace.
	LocalizedValue *string `json:"localizedValue,omitempty"`
	// Not returned if the value of the localizedValue field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the localizedValue field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.
	ValueConstraints *[]ValueConstraint `json:"valueConstraints,omitempty"`
}

// NewAspectValue instantiates a new AspectValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAspectValue() *AspectValue {
	this := AspectValue{}
	return &this
}

// NewAspectValueWithDefaults instantiates a new AspectValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAspectValueWithDefaults() *AspectValue {
	this := AspectValue{}
	return &this
}

// GetLocalizedValue returns the LocalizedValue field value if set, zero value otherwise.
func (o *AspectValue) GetLocalizedValue() string {
	if o == nil || o.LocalizedValue == nil {
		var ret string
		return ret
	}
	return *o.LocalizedValue
}

// GetLocalizedValueOk returns a tuple with the LocalizedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AspectValue) GetLocalizedValueOk() (*string, bool) {
	if o == nil || o.LocalizedValue == nil {
		return nil, false
	}
	return o.LocalizedValue, true
}

// HasLocalizedValue returns a boolean if a field has been set.
func (o *AspectValue) HasLocalizedValue() bool {
	if o != nil && o.LocalizedValue != nil {
		return true
	}

	return false
}

// SetLocalizedValue gets a reference to the given string and assigns it to the LocalizedValue field.
func (o *AspectValue) SetLocalizedValue(v string) {
	o.LocalizedValue = &v
}

// GetValueConstraints returns the ValueConstraints field value if set, zero value otherwise.
func (o *AspectValue) GetValueConstraints() []ValueConstraint {
	if o == nil || o.ValueConstraints == nil {
		var ret []ValueConstraint
		return ret
	}
	return *o.ValueConstraints
}

// GetValueConstraintsOk returns a tuple with the ValueConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AspectValue) GetValueConstraintsOk() (*[]ValueConstraint, bool) {
	if o == nil || o.ValueConstraints == nil {
		return nil, false
	}
	return o.ValueConstraints, true
}

// HasValueConstraints returns a boolean if a field has been set.
func (o *AspectValue) HasValueConstraints() bool {
	if o != nil && o.ValueConstraints != nil {
		return true
	}

	return false
}

// SetValueConstraints gets a reference to the given []ValueConstraint and assigns it to the ValueConstraints field.
func (o *AspectValue) SetValueConstraints(v []ValueConstraint) {
	o.ValueConstraints = &v
}

func (o AspectValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LocalizedValue != nil {
		toSerialize["localizedValue"] = o.LocalizedValue
	}
	if o.ValueConstraints != nil {
		toSerialize["valueConstraints"] = o.ValueConstraints
	}
	return json.Marshal(toSerialize)
}

type NullableAspectValue struct {
	value *AspectValue
	isSet bool
}

func (v NullableAspectValue) Get() *AspectValue {
	return v.value
}

func (v *NullableAspectValue) Set(val *AspectValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAspectValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAspectValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAspectValue(val *AspectValue) *NullableAspectValue {
	return &NullableAspectValue{value: val, isSet: true}
}

func (v NullableAspectValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAspectValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


