/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// CompatibilityPropertyValue This type is used by the compatibilityPropertyValues array that is returned in the getCompatibilityPropertyValues response. The compatibilityPropertyValues array contains all compatible vehicle property values that match the specified eBay marketplace, specified eBay category, and filters in the request. If the compatibility_property parameter value in the request is 'Trim', each value returned in each value field will be a different vehicle trim, applicable to any filters that are set in the filter query parameter of the request, and also based on the eBay marketplace and category specified in the call request.
type CompatibilityPropertyValue struct {
	// Each value field shows one applicable compatible vehicle property value. The values that are returned will depend on the specified eBay marketplace, specified eBay category, and filters in the request.
	Value *string `json:"value,omitempty"`
}

// NewCompatibilityPropertyValue instantiates a new CompatibilityPropertyValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompatibilityPropertyValue() *CompatibilityPropertyValue {
	this := CompatibilityPropertyValue{}
	return &this
}

// NewCompatibilityPropertyValueWithDefaults instantiates a new CompatibilityPropertyValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompatibilityPropertyValueWithDefaults() *CompatibilityPropertyValue {
	this := CompatibilityPropertyValue{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CompatibilityPropertyValue) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityPropertyValue) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CompatibilityPropertyValue) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *CompatibilityPropertyValue) SetValue(v string) {
	o.Value = &v
}

func (o CompatibilityPropertyValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableCompatibilityPropertyValue struct {
	value *CompatibilityPropertyValue
	isSet bool
}

func (v NullableCompatibilityPropertyValue) Get() *CompatibilityPropertyValue {
	return v.value
}

func (v *NullableCompatibilityPropertyValue) Set(val *CompatibilityPropertyValue) {
	v.value = val
	v.isSet = true
}

func (v NullableCompatibilityPropertyValue) IsSet() bool {
	return v.isSet
}

func (v *NullableCompatibilityPropertyValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompatibilityPropertyValue(val *CompatibilityPropertyValue) *NullableCompatibilityPropertyValue {
	return &NullableCompatibilityPropertyValue{value: val, isSet: true}
}

func (v NullableCompatibilityPropertyValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompatibilityPropertyValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


