/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// CategorySuggestionResponse This type contains an array of suggested category tree nodes that are considered by eBay to most closely correspond to the keywords provided in a query string, from a specified category tree.
type CategorySuggestionResponse struct {
	// Contains details about one or more suggested categories that correspond to the provided keywords. The array of suggested categories is sorted in order of eBay's confidence of the relevance of each category (the first category is the most relevant). Important: This call is not supported in the Sandbox environment. It will return a response payload in which the categoryName fields contain random or boilerplate text regardless of the query submitted.
	CategorySuggestions *[]CategorySuggestion `json:"categorySuggestions,omitempty"`
	// The unique identifier of the eBay category tree from which suggestions are returned.
	CategoryTreeId *string `json:"categoryTreeId,omitempty"`
	// The version of the category tree identified by categoryTreeId. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
	CategoryTreeVersion *string `json:"categoryTreeVersion,omitempty"`
}

// NewCategorySuggestionResponse instantiates a new CategorySuggestionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategorySuggestionResponse() *CategorySuggestionResponse {
	this := CategorySuggestionResponse{}
	return &this
}

// NewCategorySuggestionResponseWithDefaults instantiates a new CategorySuggestionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategorySuggestionResponseWithDefaults() *CategorySuggestionResponse {
	this := CategorySuggestionResponse{}
	return &this
}

// GetCategorySuggestions returns the CategorySuggestions field value if set, zero value otherwise.
func (o *CategorySuggestionResponse) GetCategorySuggestions() []CategorySuggestion {
	if o == nil || o.CategorySuggestions == nil {
		var ret []CategorySuggestion
		return ret
	}
	return *o.CategorySuggestions
}

// GetCategorySuggestionsOk returns a tuple with the CategorySuggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySuggestionResponse) GetCategorySuggestionsOk() (*[]CategorySuggestion, bool) {
	if o == nil || o.CategorySuggestions == nil {
		return nil, false
	}
	return o.CategorySuggestions, true
}

// HasCategorySuggestions returns a boolean if a field has been set.
func (o *CategorySuggestionResponse) HasCategorySuggestions() bool {
	if o != nil && o.CategorySuggestions != nil {
		return true
	}

	return false
}

// SetCategorySuggestions gets a reference to the given []CategorySuggestion and assigns it to the CategorySuggestions field.
func (o *CategorySuggestionResponse) SetCategorySuggestions(v []CategorySuggestion) {
	o.CategorySuggestions = &v
}

// GetCategoryTreeId returns the CategoryTreeId field value if set, zero value otherwise.
func (o *CategorySuggestionResponse) GetCategoryTreeId() string {
	if o == nil || o.CategoryTreeId == nil {
		var ret string
		return ret
	}
	return *o.CategoryTreeId
}

// GetCategoryTreeIdOk returns a tuple with the CategoryTreeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySuggestionResponse) GetCategoryTreeIdOk() (*string, bool) {
	if o == nil || o.CategoryTreeId == nil {
		return nil, false
	}
	return o.CategoryTreeId, true
}

// HasCategoryTreeId returns a boolean if a field has been set.
func (o *CategorySuggestionResponse) HasCategoryTreeId() bool {
	if o != nil && o.CategoryTreeId != nil {
		return true
	}

	return false
}

// SetCategoryTreeId gets a reference to the given string and assigns it to the CategoryTreeId field.
func (o *CategorySuggestionResponse) SetCategoryTreeId(v string) {
	o.CategoryTreeId = &v
}

// GetCategoryTreeVersion returns the CategoryTreeVersion field value if set, zero value otherwise.
func (o *CategorySuggestionResponse) GetCategoryTreeVersion() string {
	if o == nil || o.CategoryTreeVersion == nil {
		var ret string
		return ret
	}
	return *o.CategoryTreeVersion
}

// GetCategoryTreeVersionOk returns a tuple with the CategoryTreeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategorySuggestionResponse) GetCategoryTreeVersionOk() (*string, bool) {
	if o == nil || o.CategoryTreeVersion == nil {
		return nil, false
	}
	return o.CategoryTreeVersion, true
}

// HasCategoryTreeVersion returns a boolean if a field has been set.
func (o *CategorySuggestionResponse) HasCategoryTreeVersion() bool {
	if o != nil && o.CategoryTreeVersion != nil {
		return true
	}

	return false
}

// SetCategoryTreeVersion gets a reference to the given string and assigns it to the CategoryTreeVersion field.
func (o *CategorySuggestionResponse) SetCategoryTreeVersion(v string) {
	o.CategoryTreeVersion = &v
}

func (o CategorySuggestionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategorySuggestions != nil {
		toSerialize["categorySuggestions"] = o.CategorySuggestions
	}
	if o.CategoryTreeId != nil {
		toSerialize["categoryTreeId"] = o.CategoryTreeId
	}
	if o.CategoryTreeVersion != nil {
		toSerialize["categoryTreeVersion"] = o.CategoryTreeVersion
	}
	return json.Marshal(toSerialize)
}

type NullableCategorySuggestionResponse struct {
	value *CategorySuggestionResponse
	isSet bool
}

func (v NullableCategorySuggestionResponse) Get() *CategorySuggestionResponse {
	return v.value
}

func (v *NullableCategorySuggestionResponse) Set(val *CategorySuggestionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCategorySuggestionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCategorySuggestionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategorySuggestionResponse(val *CategorySuggestionResponse) *NullableCategorySuggestionResponse {
	return &NullableCategorySuggestionResponse{value: val, isSet: true}
}

func (v NullableCategorySuggestionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategorySuggestionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


