/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// AncestorReference This type contains information about one of the ancestors of a suggested category. An ordered list of these references describes the path from the suggested category to the root of the category tree it belongs to.
type AncestorReference struct {
	// The unique identifier of the eBay ancestor category. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.
	CategoryId *string `json:"categoryId,omitempty"`
	// The name of the ancestor category identified by categoryId.
	CategoryName *string `json:"categoryName,omitempty"`
	// The href portion of the getCategorySubtree call that retrieves the subtree below the ancestor category node.
	CategorySubtreeNodeHref *string `json:"categorySubtreeNodeHref,omitempty"`
	// The absolute level of the ancestor category node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
	CategoryTreeNodeLevel *int32 `json:"categoryTreeNodeLevel,omitempty"`
}

// NewAncestorReference instantiates a new AncestorReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAncestorReference() *AncestorReference {
	this := AncestorReference{}
	return &this
}

// NewAncestorReferenceWithDefaults instantiates a new AncestorReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAncestorReferenceWithDefaults() *AncestorReference {
	this := AncestorReference{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *AncestorReference) GetCategoryId() string {
	if o == nil || o.CategoryId == nil {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AncestorReference) GetCategoryIdOk() (*string, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *AncestorReference) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *AncestorReference) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetCategoryName returns the CategoryName field value if set, zero value otherwise.
func (o *AncestorReference) GetCategoryName() string {
	if o == nil || o.CategoryName == nil {
		var ret string
		return ret
	}
	return *o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AncestorReference) GetCategoryNameOk() (*string, bool) {
	if o == nil || o.CategoryName == nil {
		return nil, false
	}
	return o.CategoryName, true
}

// HasCategoryName returns a boolean if a field has been set.
func (o *AncestorReference) HasCategoryName() bool {
	if o != nil && o.CategoryName != nil {
		return true
	}

	return false
}

// SetCategoryName gets a reference to the given string and assigns it to the CategoryName field.
func (o *AncestorReference) SetCategoryName(v string) {
	o.CategoryName = &v
}

// GetCategorySubtreeNodeHref returns the CategorySubtreeNodeHref field value if set, zero value otherwise.
func (o *AncestorReference) GetCategorySubtreeNodeHref() string {
	if o == nil || o.CategorySubtreeNodeHref == nil {
		var ret string
		return ret
	}
	return *o.CategorySubtreeNodeHref
}

// GetCategorySubtreeNodeHrefOk returns a tuple with the CategorySubtreeNodeHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AncestorReference) GetCategorySubtreeNodeHrefOk() (*string, bool) {
	if o == nil || o.CategorySubtreeNodeHref == nil {
		return nil, false
	}
	return o.CategorySubtreeNodeHref, true
}

// HasCategorySubtreeNodeHref returns a boolean if a field has been set.
func (o *AncestorReference) HasCategorySubtreeNodeHref() bool {
	if o != nil && o.CategorySubtreeNodeHref != nil {
		return true
	}

	return false
}

// SetCategorySubtreeNodeHref gets a reference to the given string and assigns it to the CategorySubtreeNodeHref field.
func (o *AncestorReference) SetCategorySubtreeNodeHref(v string) {
	o.CategorySubtreeNodeHref = &v
}

// GetCategoryTreeNodeLevel returns the CategoryTreeNodeLevel field value if set, zero value otherwise.
func (o *AncestorReference) GetCategoryTreeNodeLevel() int32 {
	if o == nil || o.CategoryTreeNodeLevel == nil {
		var ret int32
		return ret
	}
	return *o.CategoryTreeNodeLevel
}

// GetCategoryTreeNodeLevelOk returns a tuple with the CategoryTreeNodeLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AncestorReference) GetCategoryTreeNodeLevelOk() (*int32, bool) {
	if o == nil || o.CategoryTreeNodeLevel == nil {
		return nil, false
	}
	return o.CategoryTreeNodeLevel, true
}

// HasCategoryTreeNodeLevel returns a boolean if a field has been set.
func (o *AncestorReference) HasCategoryTreeNodeLevel() bool {
	if o != nil && o.CategoryTreeNodeLevel != nil {
		return true
	}

	return false
}

// SetCategoryTreeNodeLevel gets a reference to the given int32 and assigns it to the CategoryTreeNodeLevel field.
func (o *AncestorReference) SetCategoryTreeNodeLevel(v int32) {
	o.CategoryTreeNodeLevel = &v
}

func (o AncestorReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategoryId != nil {
		toSerialize["categoryId"] = o.CategoryId
	}
	if o.CategoryName != nil {
		toSerialize["categoryName"] = o.CategoryName
	}
	if o.CategorySubtreeNodeHref != nil {
		toSerialize["categorySubtreeNodeHref"] = o.CategorySubtreeNodeHref
	}
	if o.CategoryTreeNodeLevel != nil {
		toSerialize["categoryTreeNodeLevel"] = o.CategoryTreeNodeLevel
	}
	return json.Marshal(toSerialize)
}

type NullableAncestorReference struct {
	value *AncestorReference
	isSet bool
}

func (v NullableAncestorReference) Get() *AncestorReference {
	return v.value
}

func (v *NullableAncestorReference) Set(val *AncestorReference) {
	v.value = val
	v.isSet = true
}

func (v NullableAncestorReference) IsSet() bool {
	return v.isSet
}

func (v *NullableAncestorReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAncestorReference(val *AncestorReference) *NullableAncestorReference {
	return &NullableAncestorReference{value: val, isSet: true}
}

func (v NullableAncestorReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAncestorReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


