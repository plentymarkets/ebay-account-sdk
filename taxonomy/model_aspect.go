/*
Taxonomy API

Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taxonomy

import (
	"encoding/json"
)

// Aspect This type contains information about an item attribute (for example, color) that is appropriate or necessary for accurately describing items in a particular leaf category. Sellers are required or encouraged to provide one or more values of this aspect when offering an item in that category on eBay.
type Aspect struct {
	AspectConstraint *AspectConstraint `json:"aspectConstraint,omitempty"`
	// A list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.
	AspectValues *[]AspectValue `json:"aspectValues,omitempty"`
	// The localized name of this aspect (for example: Colour on the eBay UK site). Note: This name is always localized for the specified marketplace.
	LocalizedAspectName *string `json:"localizedAspectName,omitempty"`
	RelevanceIndicator *RelevanceIndicator `json:"relevanceIndicator,omitempty"`
}

// NewAspect instantiates a new Aspect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAspect() *Aspect {
	this := Aspect{}
	return &this
}

// NewAspectWithDefaults instantiates a new Aspect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAspectWithDefaults() *Aspect {
	this := Aspect{}
	return &this
}

// GetAspectConstraint returns the AspectConstraint field value if set, zero value otherwise.
func (o *Aspect) GetAspectConstraint() AspectConstraint {
	if o == nil || o.AspectConstraint == nil {
		var ret AspectConstraint
		return ret
	}
	return *o.AspectConstraint
}

// GetAspectConstraintOk returns a tuple with the AspectConstraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Aspect) GetAspectConstraintOk() (*AspectConstraint, bool) {
	if o == nil || o.AspectConstraint == nil {
		return nil, false
	}
	return o.AspectConstraint, true
}

// HasAspectConstraint returns a boolean if a field has been set.
func (o *Aspect) HasAspectConstraint() bool {
	if o != nil && o.AspectConstraint != nil {
		return true
	}

	return false
}

// SetAspectConstraint gets a reference to the given AspectConstraint and assigns it to the AspectConstraint field.
func (o *Aspect) SetAspectConstraint(v AspectConstraint) {
	o.AspectConstraint = &v
}

// GetAspectValues returns the AspectValues field value if set, zero value otherwise.
func (o *Aspect) GetAspectValues() []AspectValue {
	if o == nil || o.AspectValues == nil {
		var ret []AspectValue
		return ret
	}
	return *o.AspectValues
}

// GetAspectValuesOk returns a tuple with the AspectValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Aspect) GetAspectValuesOk() (*[]AspectValue, bool) {
	if o == nil || o.AspectValues == nil {
		return nil, false
	}
	return o.AspectValues, true
}

// HasAspectValues returns a boolean if a field has been set.
func (o *Aspect) HasAspectValues() bool {
	if o != nil && o.AspectValues != nil {
		return true
	}

	return false
}

// SetAspectValues gets a reference to the given []AspectValue and assigns it to the AspectValues field.
func (o *Aspect) SetAspectValues(v []AspectValue) {
	o.AspectValues = &v
}

// GetLocalizedAspectName returns the LocalizedAspectName field value if set, zero value otherwise.
func (o *Aspect) GetLocalizedAspectName() string {
	if o == nil || o.LocalizedAspectName == nil {
		var ret string
		return ret
	}
	return *o.LocalizedAspectName
}

// GetLocalizedAspectNameOk returns a tuple with the LocalizedAspectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Aspect) GetLocalizedAspectNameOk() (*string, bool) {
	if o == nil || o.LocalizedAspectName == nil {
		return nil, false
	}
	return o.LocalizedAspectName, true
}

// HasLocalizedAspectName returns a boolean if a field has been set.
func (o *Aspect) HasLocalizedAspectName() bool {
	if o != nil && o.LocalizedAspectName != nil {
		return true
	}

	return false
}

// SetLocalizedAspectName gets a reference to the given string and assigns it to the LocalizedAspectName field.
func (o *Aspect) SetLocalizedAspectName(v string) {
	o.LocalizedAspectName = &v
}

// GetRelevanceIndicator returns the RelevanceIndicator field value if set, zero value otherwise.
func (o *Aspect) GetRelevanceIndicator() RelevanceIndicator {
	if o == nil || o.RelevanceIndicator == nil {
		var ret RelevanceIndicator
		return ret
	}
	return *o.RelevanceIndicator
}

// GetRelevanceIndicatorOk returns a tuple with the RelevanceIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Aspect) GetRelevanceIndicatorOk() (*RelevanceIndicator, bool) {
	if o == nil || o.RelevanceIndicator == nil {
		return nil, false
	}
	return o.RelevanceIndicator, true
}

// HasRelevanceIndicator returns a boolean if a field has been set.
func (o *Aspect) HasRelevanceIndicator() bool {
	if o != nil && o.RelevanceIndicator != nil {
		return true
	}

	return false
}

// SetRelevanceIndicator gets a reference to the given RelevanceIndicator and assigns it to the RelevanceIndicator field.
func (o *Aspect) SetRelevanceIndicator(v RelevanceIndicator) {
	o.RelevanceIndicator = &v
}

func (o Aspect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AspectConstraint != nil {
		toSerialize["aspectConstraint"] = o.AspectConstraint
	}
	if o.AspectValues != nil {
		toSerialize["aspectValues"] = o.AspectValues
	}
	if o.LocalizedAspectName != nil {
		toSerialize["localizedAspectName"] = o.LocalizedAspectName
	}
	if o.RelevanceIndicator != nil {
		toSerialize["relevanceIndicator"] = o.RelevanceIndicator
	}
	return json.Marshal(toSerialize)
}

type NullableAspect struct {
	value *Aspect
	isSet bool
}

func (v NullableAspect) Get() *Aspect {
	return v.value
}

func (v *NullableAspect) Set(val *Aspect) {
	v.value = val
	v.isSet = true
}

func (v NullableAspect) IsSet() bool {
	return v.isSet
}

func (v *NullableAspect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAspect(val *Aspect) *NullableAspect {
	return &NullableAspect{value: val, isSet: true}
}

func (v NullableAspect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAspect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


