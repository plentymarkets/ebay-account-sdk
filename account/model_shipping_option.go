/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// ShippingOption This complex type defines a seller's shipping configuration for either a <code>DOMESTIC</code> or <code>INTERNATIONAL</code> shipping option. <br><br>Shipping options configure the high-level settings for shipments, such as flat-rate or calculated shipping, and any rate tables the seller wants to associate with the policy. <br><br>Each <b>shippingOption</b> element has a <b>shippingServices</b> container that defines the list of shipping carriers and services that are available for the parent shipping option (that is, for either DOMESTIC or INTERNATIONAL shipping). If a seller offers an international shipping option, they must also offer a domestic shipping option. <br><br>Note that <b>costType</b> (<code>FLAT_RATE</code> or <code>CALCULATED</code>) is set in <b>shippingOptions</b> and that all associated shipping services must be able to support this cost type.
type ShippingOption struct {
	// Defines whether the shipping cost is <code>FLAT_RATE</code> (the same rate for all buyers), <code>CALCULATED</code> (the shipping rate varies by the ship-to location and size and weight of the package, as defined by the item), or <code>NOT_SPECIFIED</code> (for use with local pickup).  <br><br><i>Required if </i> the policy offers shipping options using a <b>shippingOptions</b> container. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ShippingCostTypeEnum'>eBay API documentation</a>
	CostType *string `json:"costType,omitempty"`
	InsuranceFee *Amount `json:"insuranceFee,omitempty"`
	// This field has been deprecated. <br><br>Shipping insurance is offered only via a shipping carrier's shipping services and is no longer available via eBay shipping policies.
	InsuranceOffered *bool `json:"insuranceOffered,omitempty"`
	// Use this field to set the <b>ShippingOption</b> element to either <code>DOMESTIC</code> or <code>INTERNATIONAL</code>.  <br><br><i>Required if </i> the policy offers shipping options using a <b>shippingOptions</b> container. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ShippingOptionTypeEnum'>eBay API documentation</a>
	OptionType *string `json:"optionType,omitempty"`
	PackageHandlingCost *Amount `json:"packageHandlingCost,omitempty"`
	// A unique eBay-assigned ID associated with a user-created shipping rate table. The <b>locality</b> of a shipping rate table can be either <code>DOMESTIC</code> or <code>INTERNATIONAL</code> and you must ensure the value specified in this field references a shipping rate table that matches the type specified in the <b>shippingOptions.optionType</b> field. If you mismatch the types, eBay responds with a <code>20403</code> error. <br><br>Call <a href=\"/api-docs/sell/account/resources/rate_table/methods/getRateTables\">getRateTable</a> to retrieve information (including <b>rateTableId</b> values) on the rate tables configured by a seller. For information on creating rate tables, see <a href=\"http://pages.ebay.com/help/pay/shipping-costs.html#tables\">Using shipping rate tables</a>.
	RateTableId *string `json:"rateTableId,omitempty"`
	// Contains a list of shipping services offered for either DOMESTIC or INTERNATIONAL shipments. <br><br>Sellers can specify up to four domestic shipping services and up to five international shipping services by using separate <b>shippingService</b> containers for each. Note that if the seller is opted in to the Global Shipping Program, they can specify only four other international shipping services, regardless of whether or not Global Shipping is offered as one of the services.  <br><br><i>Required if </i> the policy offers shipping options using a <b>shippingOptions</b> container.
	ShippingServices *[]ShippingService `json:"shippingServices,omitempty"`
}

// NewShippingOption instantiates a new ShippingOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShippingOption() *ShippingOption {
	this := ShippingOption{}
	return &this
}

// NewShippingOptionWithDefaults instantiates a new ShippingOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShippingOptionWithDefaults() *ShippingOption {
	this := ShippingOption{}
	return &this
}

// GetCostType returns the CostType field value if set, zero value otherwise.
func (o *ShippingOption) GetCostType() string {
	if o == nil || o.CostType == nil {
		var ret string
		return ret
	}
	return *o.CostType
}

// GetCostTypeOk returns a tuple with the CostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingOption) GetCostTypeOk() (*string, bool) {
	if o == nil || o.CostType == nil {
		return nil, false
	}
	return o.CostType, true
}

// HasCostType returns a boolean if a field has been set.
func (o *ShippingOption) HasCostType() bool {
	if o != nil && o.CostType != nil {
		return true
	}

	return false
}

// SetCostType gets a reference to the given string and assigns it to the CostType field.
func (o *ShippingOption) SetCostType(v string) {
	o.CostType = &v
}

// GetInsuranceFee returns the InsuranceFee field value if set, zero value otherwise.
func (o *ShippingOption) GetInsuranceFee() Amount {
	if o == nil || o.InsuranceFee == nil {
		var ret Amount
		return ret
	}
	return *o.InsuranceFee
}

// GetInsuranceFeeOk returns a tuple with the InsuranceFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingOption) GetInsuranceFeeOk() (*Amount, bool) {
	if o == nil || o.InsuranceFee == nil {
		return nil, false
	}
	return o.InsuranceFee, true
}

// HasInsuranceFee returns a boolean if a field has been set.
func (o *ShippingOption) HasInsuranceFee() bool {
	if o != nil && o.InsuranceFee != nil {
		return true
	}

	return false
}

// SetInsuranceFee gets a reference to the given Amount and assigns it to the InsuranceFee field.
func (o *ShippingOption) SetInsuranceFee(v Amount) {
	o.InsuranceFee = &v
}

// GetInsuranceOffered returns the InsuranceOffered field value if set, zero value otherwise.
func (o *ShippingOption) GetInsuranceOffered() bool {
	if o == nil || o.InsuranceOffered == nil {
		var ret bool
		return ret
	}
	return *o.InsuranceOffered
}

// GetInsuranceOfferedOk returns a tuple with the InsuranceOffered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingOption) GetInsuranceOfferedOk() (*bool, bool) {
	if o == nil || o.InsuranceOffered == nil {
		return nil, false
	}
	return o.InsuranceOffered, true
}

// HasInsuranceOffered returns a boolean if a field has been set.
func (o *ShippingOption) HasInsuranceOffered() bool {
	if o != nil && o.InsuranceOffered != nil {
		return true
	}

	return false
}

// SetInsuranceOffered gets a reference to the given bool and assigns it to the InsuranceOffered field.
func (o *ShippingOption) SetInsuranceOffered(v bool) {
	o.InsuranceOffered = &v
}

// GetOptionType returns the OptionType field value if set, zero value otherwise.
func (o *ShippingOption) GetOptionType() string {
	if o == nil || o.OptionType == nil {
		var ret string
		return ret
	}
	return *o.OptionType
}

// GetOptionTypeOk returns a tuple with the OptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingOption) GetOptionTypeOk() (*string, bool) {
	if o == nil || o.OptionType == nil {
		return nil, false
	}
	return o.OptionType, true
}

// HasOptionType returns a boolean if a field has been set.
func (o *ShippingOption) HasOptionType() bool {
	if o != nil && o.OptionType != nil {
		return true
	}

	return false
}

// SetOptionType gets a reference to the given string and assigns it to the OptionType field.
func (o *ShippingOption) SetOptionType(v string) {
	o.OptionType = &v
}

// GetPackageHandlingCost returns the PackageHandlingCost field value if set, zero value otherwise.
func (o *ShippingOption) GetPackageHandlingCost() Amount {
	if o == nil || o.PackageHandlingCost == nil {
		var ret Amount
		return ret
	}
	return *o.PackageHandlingCost
}

// GetPackageHandlingCostOk returns a tuple with the PackageHandlingCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingOption) GetPackageHandlingCostOk() (*Amount, bool) {
	if o == nil || o.PackageHandlingCost == nil {
		return nil, false
	}
	return o.PackageHandlingCost, true
}

// HasPackageHandlingCost returns a boolean if a field has been set.
func (o *ShippingOption) HasPackageHandlingCost() bool {
	if o != nil && o.PackageHandlingCost != nil {
		return true
	}

	return false
}

// SetPackageHandlingCost gets a reference to the given Amount and assigns it to the PackageHandlingCost field.
func (o *ShippingOption) SetPackageHandlingCost(v Amount) {
	o.PackageHandlingCost = &v
}

// GetRateTableId returns the RateTableId field value if set, zero value otherwise.
func (o *ShippingOption) GetRateTableId() string {
	if o == nil || o.RateTableId == nil {
		var ret string
		return ret
	}
	return *o.RateTableId
}

// GetRateTableIdOk returns a tuple with the RateTableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingOption) GetRateTableIdOk() (*string, bool) {
	if o == nil || o.RateTableId == nil {
		return nil, false
	}
	return o.RateTableId, true
}

// HasRateTableId returns a boolean if a field has been set.
func (o *ShippingOption) HasRateTableId() bool {
	if o != nil && o.RateTableId != nil {
		return true
	}

	return false
}

// SetRateTableId gets a reference to the given string and assigns it to the RateTableId field.
func (o *ShippingOption) SetRateTableId(v string) {
	o.RateTableId = &v
}

// GetShippingServices returns the ShippingServices field value if set, zero value otherwise.
func (o *ShippingOption) GetShippingServices() []ShippingService {
	if o == nil || o.ShippingServices == nil {
		var ret []ShippingService
		return ret
	}
	return *o.ShippingServices
}

// GetShippingServicesOk returns a tuple with the ShippingServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingOption) GetShippingServicesOk() (*[]ShippingService, bool) {
	if o == nil || o.ShippingServices == nil {
		return nil, false
	}
	return o.ShippingServices, true
}

// HasShippingServices returns a boolean if a field has been set.
func (o *ShippingOption) HasShippingServices() bool {
	if o != nil && o.ShippingServices != nil {
		return true
	}

	return false
}

// SetShippingServices gets a reference to the given []ShippingService and assigns it to the ShippingServices field.
func (o *ShippingOption) SetShippingServices(v []ShippingService) {
	o.ShippingServices = &v
}

func (o ShippingOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CostType != nil {
		toSerialize["costType"] = o.CostType
	}
	if o.InsuranceFee != nil {
		toSerialize["insuranceFee"] = o.InsuranceFee
	}
	if o.InsuranceOffered != nil {
		toSerialize["insuranceOffered"] = o.InsuranceOffered
	}
	if o.OptionType != nil {
		toSerialize["optionType"] = o.OptionType
	}
	if o.PackageHandlingCost != nil {
		toSerialize["packageHandlingCost"] = o.PackageHandlingCost
	}
	if o.RateTableId != nil {
		toSerialize["rateTableId"] = o.RateTableId
	}
	if o.ShippingServices != nil {
		toSerialize["shippingServices"] = o.ShippingServices
	}
	return json.Marshal(toSerialize)
}

type NullableShippingOption struct {
	value *ShippingOption
	isSet bool
}

func (v NullableShippingOption) Get() *ShippingOption {
	return v.value
}

func (v *NullableShippingOption) Set(val *ShippingOption) {
	v.value = val
	v.isSet = true
}

func (v NullableShippingOption) IsSet() bool {
	return v.isSet
}

func (v *NullableShippingOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShippingOption(val *ShippingOption) *NullableShippingOption {
	return &NullableShippingOption{value: val, isSet: true}
}

func (v NullableShippingOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShippingOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


