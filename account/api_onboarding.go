/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// OnboardingApiService OnboardingApi service
type OnboardingApiService service

type ApiGetPaymentsProgramOnboardingRequest struct {
	ctx _context.Context
	ApiService *OnboardingApiService
	marketplaceId string
	paymentsProgramType string
}


func (r ApiGetPaymentsProgramOnboardingRequest) Execute() (PaymentsProgramOnboardingResponse, *_nethttp.Response, error) {
	return r.ApiService.GetPaymentsProgramOnboardingExecute(r)
}

/*
GetPaymentsProgramOnboarding Method for GetPaymentsProgramOnboarding

This method retrieves a seller's onboarding status of eBay managed payments for a specified marketplace. The overall onboarding status of the seller and the status of each onboarding step is returned. <p>Presently, the only supported payments program type is <code>EBAY_PAYMENTS</code>. See <a href="https://pages.ebay.com/seller-center/service-and-payments/managed-payments-on-ebay.html" target="_blank">Managed Payments on eBay</a> and <a href="https://pages.ebay.com/payment/2.0/terms.html" target="_blank">Payments Terms of Use</a>.</p><p> <span class="tablenote"><strong>Note:</strong> Managed payments availability: <a href="/managed-payments">eBay managed payments</a> is presently available in the US and Germany, and will roll out to Canada, UK, and Australia in July 2020.</span></p>

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param marketplaceId The eBay marketplace ID associated with the onboarding status to retrieve. Only enums for marketplaces that support or will soon support eBay managed payments are allowed. Error 20408 is returned for any other eBay marketplace. No response payload is returned with this error.
 @param paymentsProgramType The type of payments program whose status is returned by the call. Presently, the only supported payments program is <code>EBAY_PAYMENTS</code>. For details on the program, see <a href=\"https://pages.ebay.com/payment/2.0/terms.html\" target=\"_blank\">Payments Terms of Use</a>. 
 @return ApiGetPaymentsProgramOnboardingRequest
*/
func (a *OnboardingApiService) GetPaymentsProgramOnboarding(ctx _context.Context, marketplaceId string, paymentsProgramType string) ApiGetPaymentsProgramOnboardingRequest {
	return ApiGetPaymentsProgramOnboardingRequest{
		ApiService: a,
		ctx: ctx,
		marketplaceId: marketplaceId,
		paymentsProgramType: paymentsProgramType,
	}
}

// Execute executes the request
//  @return PaymentsProgramOnboardingResponse
func (a *OnboardingApiService) GetPaymentsProgramOnboardingExecute(r ApiGetPaymentsProgramOnboardingRequest) (PaymentsProgramOnboardingResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaymentsProgramOnboardingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnboardingApiService.GetPaymentsProgramOnboarding")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payments_program/{marketplace_id}/{payments_program_type}/onboarding"
	localVarPath = strings.Replace(localVarPath, "{"+"marketplace_id"+"}", _neturl.PathEscape(parameterToString(r.marketplaceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"payments_program_type"+"}", _neturl.PathEscape(parameterToString(r.paymentsProgramType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
