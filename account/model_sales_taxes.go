/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// SalesTaxes A list of sales tax tables.
type SalesTaxes struct {
	// A list of sales tax tables that have been set up by a seller.
	SalesTaxes *[]SalesTax `json:"salesTaxes,omitempty"`
}

// NewSalesTaxes instantiates a new SalesTaxes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesTaxes() *SalesTaxes {
	this := SalesTaxes{}
	return &this
}

// NewSalesTaxesWithDefaults instantiates a new SalesTaxes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesTaxesWithDefaults() *SalesTaxes {
	this := SalesTaxes{}
	return &this
}

// GetSalesTaxes returns the SalesTaxes field value if set, zero value otherwise.
func (o *SalesTaxes) GetSalesTaxes() []SalesTax {
	if o == nil || o.SalesTaxes == nil {
		var ret []SalesTax
		return ret
	}
	return *o.SalesTaxes
}

// GetSalesTaxesOk returns a tuple with the SalesTaxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesTaxes) GetSalesTaxesOk() (*[]SalesTax, bool) {
	if o == nil || o.SalesTaxes == nil {
		return nil, false
	}
	return o.SalesTaxes, true
}

// HasSalesTaxes returns a boolean if a field has been set.
func (o *SalesTaxes) HasSalesTaxes() bool {
	if o != nil && o.SalesTaxes != nil {
		return true
	}

	return false
}

// SetSalesTaxes gets a reference to the given []SalesTax and assigns it to the SalesTaxes field.
func (o *SalesTaxes) SetSalesTaxes(v []SalesTax) {
	o.SalesTaxes = &v
}

func (o SalesTaxes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SalesTaxes != nil {
		toSerialize["salesTaxes"] = o.SalesTaxes
	}
	return json.Marshal(toSerialize)
}

type NullableSalesTaxes struct {
	value *SalesTaxes
	isSet bool
}

func (v NullableSalesTaxes) Get() *SalesTaxes {
	return v.value
}

func (v *NullableSalesTaxes) Set(val *SalesTaxes) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesTaxes) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesTaxes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesTaxes(val *SalesTaxes) *NullableSalesTaxes {
	return &NullableSalesTaxes{value: val, isSet: true}
}

func (v NullableSalesTaxes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesTaxes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


