/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (seller-defined custom policies and eBay business policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// RegionSet This complex type contains the <b>regionIncluded</b> and <b>regionExcluded</b> fields, which indicate the areas to where the seller does and doesn't ship. <p>Normally a seller ships to as many areas as possible using both DOMESTIC and INTERNATIONAL shipping options, and they don't have a need to exclude any regions from their ship-to locations. Here, there's no reason to set <b>regionExcluded</b> fields. However, it makes sense to set the <b>regionExcluded</b> field when a seller wants to exclude a small area that's within a larger area they service. For example, suppose a seller indicates they ship 'Worldwide', but for some reason must exclude a specific country, or world region. <p class=\"tablenote\"><b>Note:</b> Configuring the <b>shipToLocations</b> is tricky because the <b>regionIncluded</b> and <b>regionExcluded</b> fields are valid in different parts of the schema and their allowable settings vary upon the context. For details on setting these fields, see <a href=\"/api-docs/sell/static/seller-accounts/ht_shipping-worldwide.html#shipToLocations\"></a>.</p>
type RegionSet struct {
	// A list of one or more <b>regionsName</b> fields that specify the areas to where a seller does not ship. Populate <b>regionExcluded</b> in only the top-level <b>shipToLocations</b> container (do not populate this field within the <b>shippingOptions</b> container). <p>Normally a seller ships to as many areas as possible using both DOMESTIC and INTERNATIONAL shipping options and they don't have a need to exclude any regions from their ship-to locations. With this, there's no reason to set <b>regionExclude</b> fields. However, it makes sense to set the <b>regionExcluded</b> field when a seller wants to exclude a small area that's located within a larger area they service. For example, suppose a seller indicates they ship 'Worldwide', but for some reason must exclude a specific country, or world region, from the larger world area they ship to. <br><br>To retrieve the regions you can specify in the associated <b>regionName</b> field, call <b>GeteBayDetails</b> with <b>DetailName</b> set to <code>ExcludeShippingLocationDetails</code>, then review the <b>Location</b> fields in the response for the strings that you can specify <b>regionExcluded.regionName</b>.  <br><br>Note that if a buyer's primary ship-to location is a region that a seller has excluded in their fulfillment policy (or if the buyer does not have a primary ship-to location), they will receive an error message if they attempt to buy or place a bid on an item that uses that fulfillment policy. <br><br>For details on setting this field, see <a href=\"/api-docs/sell/static/seller-accounts/ht_shipping-exclude-regions.html\">Excluding specific regions from included shipping areas</a>.
	RegionExcluded *[]Region `json:"regionExcluded,omitempty"`
	// A list of one or more <b>regionsName</b> fields that specify the areas to where a seller ships. <br><br><b>Important:</b> Populate this field only when the parent <b>shipToLocations</b> object is located within a <b>shippingOptions</b> container (that is, the parent <b>shipTolocations</b> object must not be the one at the top-level of the policy). Also, this field needs to be populated only when the associated <b>shippingOptions</b> container has <b>optionType</b> set to <code>INTERNATIONAL</code>. <br><br>Withing an international shipping option, set this value to <code>Worldwide</code> to indicate the seller ships to all world regions. If needed, use the <b>regionExcluded</b> field to exclude any regions in the world to where the seller does not ship. <br><br>Each eBay marketplace supports its own set of allowable shipping locations. Obtain the valid 'Ship-To Locations' for a marketplace by calling <b>GeteBayDetails</b> with <b>DetailName</b> set to <code>ShippingLocationDetails</code>, then review the <b>ShippingLocation</b> fields in the response for the strings that you can specify in the <b>regionIncluded.regionName</b> field. <br><br>For DOMESTIC shipping options, eBay automatically uses the seller's listing country as the default <b>regionIncluded</b> country. For details on setting this field, see <a href=\"/api-docs/sell/static/seller-accounts/ht_shipping-worldwide.html\">How to set up worldwide shipping</a>.  <br><br>This field is always returned in the shipping policy response.  <br><br><i>Required if</i> <b>optionType</b> set to <code>INTERNATIONAL</code>.
	RegionIncluded *[]Region `json:"regionIncluded,omitempty"`
}

// NewRegionSet instantiates a new RegionSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionSet() *RegionSet {
	this := RegionSet{}
	return &this
}

// NewRegionSetWithDefaults instantiates a new RegionSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionSetWithDefaults() *RegionSet {
	this := RegionSet{}
	return &this
}

// GetRegionExcluded returns the RegionExcluded field value if set, zero value otherwise.
func (o *RegionSet) GetRegionExcluded() []Region {
	if o == nil || o.RegionExcluded == nil {
		var ret []Region
		return ret
	}
	return *o.RegionExcluded
}

// GetRegionExcludedOk returns a tuple with the RegionExcluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionSet) GetRegionExcludedOk() (*[]Region, bool) {
	if o == nil || o.RegionExcluded == nil {
		return nil, false
	}
	return o.RegionExcluded, true
}

// HasRegionExcluded returns a boolean if a field has been set.
func (o *RegionSet) HasRegionExcluded() bool {
	if o != nil && o.RegionExcluded != nil {
		return true
	}

	return false
}

// SetRegionExcluded gets a reference to the given []Region and assigns it to the RegionExcluded field.
func (o *RegionSet) SetRegionExcluded(v []Region) {
	o.RegionExcluded = &v
}

// GetRegionIncluded returns the RegionIncluded field value if set, zero value otherwise.
func (o *RegionSet) GetRegionIncluded() []Region {
	if o == nil || o.RegionIncluded == nil {
		var ret []Region
		return ret
	}
	return *o.RegionIncluded
}

// GetRegionIncludedOk returns a tuple with the RegionIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionSet) GetRegionIncludedOk() (*[]Region, bool) {
	if o == nil || o.RegionIncluded == nil {
		return nil, false
	}
	return o.RegionIncluded, true
}

// HasRegionIncluded returns a boolean if a field has been set.
func (o *RegionSet) HasRegionIncluded() bool {
	if o != nil && o.RegionIncluded != nil {
		return true
	}

	return false
}

// SetRegionIncluded gets a reference to the given []Region and assigns it to the RegionIncluded field.
func (o *RegionSet) SetRegionIncluded(v []Region) {
	o.RegionIncluded = &v
}

func (o RegionSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RegionExcluded != nil {
		toSerialize["regionExcluded"] = o.RegionExcluded
	}
	if o.RegionIncluded != nil {
		toSerialize["regionIncluded"] = o.RegionIncluded
	}
	return json.Marshal(toSerialize)
}

type NullableRegionSet struct {
	value *RegionSet
	isSet bool
}

func (v NullableRegionSet) Get() *RegionSet {
	return v.value
}

func (v *NullableRegionSet) Set(val *RegionSet) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionSet) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionSet(val *RegionSet) *NullableRegionSet {
	return &NullableRegionSet{value: val, isSet: true}
}

func (v NullableRegionSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


