/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (seller-defined custom policies and eBay business policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// KycCheck This type is used to provide details about any KYC check that is applicable to the managed payments seller.
type KycCheck struct {
	// The enumeration value returned in this field categorizes the type of details needed for the KYC check. More information about the check is shown in the <b>detailMessage</b> and other applicable, corresponding fields. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/kyc:DetailsType'>eBay API documentation</a>
	DataRequired *string `json:"dataRequired,omitempty"`
	// The timestamp in this field indicates the date by which the seller should resolve the KYC requirement.<br><br>The timestamp in this field uses the UTC date and time format described in the <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" target=\"_blank\">ISO 8601 Standard</a>. See below for this format and an example: <br><br><i>MM-DD-YYYY HH:MM:SS</i><br/><code>06-05-2020 10:34:18</code>
	DueDate *string `json:"dueDate,omitempty"`
	// If applicable and available, a URL will be returned in this field, and the link will take the seller to an eBay page where they can provide the requested information.
	RemedyUrl *string `json:"remedyUrl,omitempty"`
	// This field gives a short summary of what is required from the seller. An example might be, '<code>Upload bank document now.</code>'. The <b>detailMessage</b> field will often provide more details on what is required of the seller.
	Alert *string `json:"alert,omitempty"`
	// This field gives a detailed message about what is required from the seller. An example might be, '<code>Please upload a bank document by 2020-08-01 to get your account back in good standing.</code>'.
	DetailMessage *string `json:"detailMessage,omitempty"`
}

// NewKycCheck instantiates a new KycCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKycCheck() *KycCheck {
	this := KycCheck{}
	return &this
}

// NewKycCheckWithDefaults instantiates a new KycCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKycCheckWithDefaults() *KycCheck {
	this := KycCheck{}
	return &this
}

// GetDataRequired returns the DataRequired field value if set, zero value otherwise.
func (o *KycCheck) GetDataRequired() string {
	if o == nil || o.DataRequired == nil {
		var ret string
		return ret
	}
	return *o.DataRequired
}

// GetDataRequiredOk returns a tuple with the DataRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KycCheck) GetDataRequiredOk() (*string, bool) {
	if o == nil || o.DataRequired == nil {
		return nil, false
	}
	return o.DataRequired, true
}

// HasDataRequired returns a boolean if a field has been set.
func (o *KycCheck) HasDataRequired() bool {
	if o != nil && o.DataRequired != nil {
		return true
	}

	return false
}

// SetDataRequired gets a reference to the given string and assigns it to the DataRequired field.
func (o *KycCheck) SetDataRequired(v string) {
	o.DataRequired = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *KycCheck) GetDueDate() string {
	if o == nil || o.DueDate == nil {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KycCheck) GetDueDateOk() (*string, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *KycCheck) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *KycCheck) SetDueDate(v string) {
	o.DueDate = &v
}

// GetRemedyUrl returns the RemedyUrl field value if set, zero value otherwise.
func (o *KycCheck) GetRemedyUrl() string {
	if o == nil || o.RemedyUrl == nil {
		var ret string
		return ret
	}
	return *o.RemedyUrl
}

// GetRemedyUrlOk returns a tuple with the RemedyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KycCheck) GetRemedyUrlOk() (*string, bool) {
	if o == nil || o.RemedyUrl == nil {
		return nil, false
	}
	return o.RemedyUrl, true
}

// HasRemedyUrl returns a boolean if a field has been set.
func (o *KycCheck) HasRemedyUrl() bool {
	if o != nil && o.RemedyUrl != nil {
		return true
	}

	return false
}

// SetRemedyUrl gets a reference to the given string and assigns it to the RemedyUrl field.
func (o *KycCheck) SetRemedyUrl(v string) {
	o.RemedyUrl = &v
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *KycCheck) GetAlert() string {
	if o == nil || o.Alert == nil {
		var ret string
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KycCheck) GetAlertOk() (*string, bool) {
	if o == nil || o.Alert == nil {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *KycCheck) HasAlert() bool {
	if o != nil && o.Alert != nil {
		return true
	}

	return false
}

// SetAlert gets a reference to the given string and assigns it to the Alert field.
func (o *KycCheck) SetAlert(v string) {
	o.Alert = &v
}

// GetDetailMessage returns the DetailMessage field value if set, zero value otherwise.
func (o *KycCheck) GetDetailMessage() string {
	if o == nil || o.DetailMessage == nil {
		var ret string
		return ret
	}
	return *o.DetailMessage
}

// GetDetailMessageOk returns a tuple with the DetailMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KycCheck) GetDetailMessageOk() (*string, bool) {
	if o == nil || o.DetailMessage == nil {
		return nil, false
	}
	return o.DetailMessage, true
}

// HasDetailMessage returns a boolean if a field has been set.
func (o *KycCheck) HasDetailMessage() bool {
	if o != nil && o.DetailMessage != nil {
		return true
	}

	return false
}

// SetDetailMessage gets a reference to the given string and assigns it to the DetailMessage field.
func (o *KycCheck) SetDetailMessage(v string) {
	o.DetailMessage = &v
}

func (o KycCheck) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataRequired != nil {
		toSerialize["dataRequired"] = o.DataRequired
	}
	if o.DueDate != nil {
		toSerialize["dueDate"] = o.DueDate
	}
	if o.RemedyUrl != nil {
		toSerialize["remedyUrl"] = o.RemedyUrl
	}
	if o.Alert != nil {
		toSerialize["alert"] = o.Alert
	}
	if o.DetailMessage != nil {
		toSerialize["detailMessage"] = o.DetailMessage
	}
	return json.Marshal(toSerialize)
}

type NullableKycCheck struct {
	value *KycCheck
	isSet bool
}

func (v NullableKycCheck) Get() *KycCheck {
	return v.value
}

func (v *NullableKycCheck) Set(val *KycCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableKycCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableKycCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKycCheck(val *KycCheck) *NullableKycCheck {
	return &NullableKycCheck{value: val, isSet: true}
}

func (v NullableKycCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKycCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


