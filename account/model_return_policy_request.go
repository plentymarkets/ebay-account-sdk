/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (seller-defined custom policies and eBay business policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// ReturnPolicyRequest This root container defines a seller's return policy for a specific marketplace and category type. Used when creating or updating a return policy, <b>returnPolicyRequest</b> encapsulates a seller's terms for how buyers can return items. While each seller must define at least one payment policy for every marketplace into which they sell, sellers can define multiple payment policies for a single marketplace by specifying different configurations for the unique policies.  <br><br>A successful call returns a <b>paymentPolicyId</b>, plus the <b>Location</b> response header contains the URI to the resource.  <br><br>Use the Metadata API <getReturnPolicies</b> method to determine which categories in the marketplace(s) require you to provide a return policy. Also note that some marketplaces require you to provide a specific return policy for vehicle listings.  <br><br>Policy instructions can be localized by providing a locale in the <code>Content-Language</code> HTTP request header. For example: <code>Content-Language: de-DE</code>.  <p class=\"tablenote\"><b>Tip: </b>For more on using business policies, see <a href=\"/api-docs/sell/static/seller-accounts/business-policies.html\">eBay business policies</a>.</p>
type ReturnPolicyRequest struct {
	// For return policies, this field can be set to only <code>ALL_EXCLUDING_MOTORS_VEHICLES</code> (returns on motor vehicles are not processed through eBay flows.) <br><br><b>Default</b>: <code>ALL_EXCLUDING_MOTORS_VEHICLES</code> (for return policies only)
	CategoryTypes *[]CategoryType `json:"categoryTypes,omitempty"`
	// An optional seller-defined description of the return policy for internal use (this value is not displayed to end users).  <br><br><b>Max length</b>: 250
	Description *string `json:"description,omitempty"`
	// <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field has been deprecated as of version 1.2.0, released on May 31, 2018. Any value supplied in this field is ignored, it is neither read nor returned.</p>  <p>If set to <code>true</code>, the seller offers an <em>Extended Holiday Returns</em> policy for their listings.  <p><span class=\"tablenote\"><strong>IMPORTANT:</strong> Extended Holiday Returns is a seasonally available feature that is offered on some eBay marketplaces. To see if the feature is enabled in any given year, check the <a href=\"http://pages.ebay.com/seller-center/shipping/returns.html\">Returns on eBay</a> page before the holiday season begins. If the feature is not enabled for the season, this field is ignored.</span></p>  <p>The extended holiday returns period is defined by three dates:</p> <ul><li>The start date = start of November.</li><li>The purchase cutoff date = end of the year.</li><li>The end date = end of January.</li></ul>  <p>The above dates may vary by a few days each year. Sellers are notified of the current dates on their eBay marketplace before the holiday period starts.</p>  <p>Sellers can specify Extended Holiday Returns (as well as their regular non-holiday returns period) for chosen listings at any time during the year. The Extended Holiday Returns offer is not visible in listings until the start date of current year's holiday returns period, at which point it overrides the non-holiday returns policy. Buyers can see the Extended Holiday Returns offer in listings displayed through the purchase cutoff date and are able to return those purchases until the end date of the period.</p>  <p>After the purchase cutoff date, the Extended Holiday Returns offer automatically disappears from the listings and the seller's non-holiday returns period reappears. Purchases made from that point on are subject to the non-holiday returns period, while purchases made before the cutoff date still have until the end of the period to return under the program.</p>  <p>If the value of <strong>holidayReturns</strong> is <code>false</code> for an item, the return period specified by the <strong>returnsWithinOption</strong> field applies, regardless of the purchase date. If the item is listed with a policy of no returns, <strong>holidayReturns</strong> is automatically reset to <code>false</code>.</p>
	ExtendedHolidayReturnsOffered *bool `json:"extendedHolidayReturnsOffered,omitempty"`
	InternationalOverride *InternationalReturnOverrideType `json:"internationalOverride,omitempty"`
	// The ID of the eBay marketplace to which this return policy applies. If this value is not specified, value defaults to the seller's eBay registration site. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
	MarketplaceId *string `json:"marketplaceId,omitempty"`
	// A user-defined name for this return policy. Names must be unique for policies assigned to the same marketplace. <br><br><b>Max length</b>: 64
	Name *string `json:"name,omitempty"`
	// <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> this field has been deprecated as of version 1.2.0, released on May 31, 2018. Any value other than <code>MONEY_BACK</code> will be treated as <code>MONEY_BACK</code> (although for a period of time, eBay will store and return the legacy values to preserve backwards compatibility).</p>  Indicates the method the seller uses to compensate the buyer for returned items. The return method specified applies only to <a href=\"http://developer.ebay.com/DevZone/guides/features-guide/default.html#Development/Post-Order-Returns.html#return-reasons\" target=\"_blank\">remorse returns</a>. <br><br>Note that each eBay marketplace can support different sets of refund methods. Also, each eBay marketplace has a default setting for this value and if you do not specifically set this value, sellers are obligated to honor the setting that displays in their listings. Call <b>GeteBayDetails</b> in the Trading API to see what refund methods the marketplaces you sell into support. <br><br>We recommend you set this field to the value of your preferred refund method and that you use the <b>description</b> field to detail the seller's return policy (such as indicating how quickly the seller will process a refund, whether the seller must receive the item before processing a refund, and other similar useful details). <br><br>You cannot modify this value in a Revise item call if (1) the listing has bids or (2) the listing ends within 12 hours. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:RefundMethodEnum'>eBay API documentation</a>
	RefundMethod *string `json:"refundMethod,omitempty"`
	// <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field has been deprecated as of version 1.2.0, released on May 31, 2018. Any value supplied in this field is ignored, it is neither read nor returned.</p>  <p>Sellers who accept returns should include this field if they charge buyers a restocking fee when items are returned. A restocking fee comes into play only when an item is returned due to buyer remorse and/or a purchasing mistake, but sellers cannot charge a restocking fee for SNAD-related returns. The total amount returned to the buyer is reduced by the cost of the item multiplied by the percentage indicated by this field. <p>Allowable restocking fee values are:</p> <ul><li><code>0.0</code>: No restocking fee is charged to the buyer</li><li><code>10.0</code>: 10 percent of the item price is charged to the buyer</li><li><code>15.0</code>: 15 percent of the item price is charged to the buyer</li> <li><code>20.0</code>: Up to 20 percent of the item price is charged to the buyer</li></ul>
	RestockingFeePercentage *string `json:"restockingFeePercentage,omitempty"`
	// <p class=\"tablenote\"><span  style=\"color: #dd1e31;\"><b>Important!</b></span> This field is being deprecated on many marketplaces. Once deprecated, this field will be ignored on marketplaces where it is not supported and it will neither be read nor returned.</p>  <p>This optional field contains the seller's detailed explanation for their return policy and is displayed in the Return Policy section of the View Item page. This field is valid in only the following marketplaces (the field is otherwise ignored):</p> <ul> <li>Germany (DE)</li> <li>Spain (ES)</li> <li>France (FR)</li> <li>Italy (IT)</li> </ul> Where valid, sellers can use this field to add details about their return policies. eBay uses this text string as-is in the Return Policy section of the View Item page. Avoid HTML and avoid character entity references (such as &amp;amp;pound; or &amp;amp;#163;). To include special characters in the return policy description, use the literal UTF-8 or ISO-8559-1 character (e.g. &amp;#163;).  <br><br><b>Max length</b>: 5000 (8000 for DE)
	ReturnInstructions *string `json:"returnInstructions,omitempty"`
	// Valid in the US marketplace only, this optional field indicates additional services (other than money-back) that sellers can offer buyers for <a href=\"http://developer.ebay.com/DevZone/guides/features-guide/default.html#Development/Post-Order-Returns.html#return-reasons\" target=\"_blank\">remorse returns</a>.  <br><br>As of version 1.2.0, the only accepted value for this field is <code>REPLACEMENT</code>. This field is valid in only the US marketplace, any supplied value is ignored in other marketplaces. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum'>eBay API documentation</a>
	ReturnMethod *string `json:"returnMethod,omitempty"`
	ReturnPeriod *TimeDuration `json:"returnPeriod,omitempty"`
	// If set to <code>true</code>, the seller accepts returns. <p>Call the <b>getReturnPolicies</b> in the Metadata API to see what categories require returns to be offered for listings in each category. Also, note that some European marketplaces (for example, UK, IE, and DE) require sellers to accept returns for fixed-price items and auctions listed with Buy It Now. For details, see <a href=\"http://pages.ebay.co.uk/help/policies/user-agreement.html#returns\">Returns and the Law (UK)</a>.</p>  <p><span class=\"tablenote\"><strong>Note:</strong>Top-Rated sellers must accept item returns and the <b>handlingTime</b> should be set to zero days or one day for a listing to receive a Top-Rated Plus badge on the View Item or search result pages. For more information on eBay's Top-Rated seller program, see <a href=\"http://pages.ebay.com/help/sell/top-rated.html\">Becoming a Top Rated Seller and qualifying for Top Rated Plus benefits</a>.</span></p>
	ReturnsAccepted *bool `json:"returnsAccepted,omitempty"`
	// This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either <code>BUYER</code> or <code>SELLER</code>.  <br><br>Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for SNAD-related issues.  <br><br><i>Required if </i> <b>returnsAccepted</b> is set to <code>true</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum'>eBay API documentation</a>
	ReturnShippingCostPayer *string `json:"returnShippingCostPayer,omitempty"`
}

// NewReturnPolicyRequest instantiates a new ReturnPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnPolicyRequest() *ReturnPolicyRequest {
	this := ReturnPolicyRequest{}
	return &this
}

// NewReturnPolicyRequestWithDefaults instantiates a new ReturnPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnPolicyRequestWithDefaults() *ReturnPolicyRequest {
	this := ReturnPolicyRequest{}
	return &this
}

// GetCategoryTypes returns the CategoryTypes field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetCategoryTypes() []CategoryType {
	if o == nil || o.CategoryTypes == nil {
		var ret []CategoryType
		return ret
	}
	return *o.CategoryTypes
}

// GetCategoryTypesOk returns a tuple with the CategoryTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetCategoryTypesOk() (*[]CategoryType, bool) {
	if o == nil || o.CategoryTypes == nil {
		return nil, false
	}
	return o.CategoryTypes, true
}

// HasCategoryTypes returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasCategoryTypes() bool {
	if o != nil && o.CategoryTypes != nil {
		return true
	}

	return false
}

// SetCategoryTypes gets a reference to the given []CategoryType and assigns it to the CategoryTypes field.
func (o *ReturnPolicyRequest) SetCategoryTypes(v []CategoryType) {
	o.CategoryTypes = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReturnPolicyRequest) SetDescription(v string) {
	o.Description = &v
}

// GetExtendedHolidayReturnsOffered returns the ExtendedHolidayReturnsOffered field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetExtendedHolidayReturnsOffered() bool {
	if o == nil || o.ExtendedHolidayReturnsOffered == nil {
		var ret bool
		return ret
	}
	return *o.ExtendedHolidayReturnsOffered
}

// GetExtendedHolidayReturnsOfferedOk returns a tuple with the ExtendedHolidayReturnsOffered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetExtendedHolidayReturnsOfferedOk() (*bool, bool) {
	if o == nil || o.ExtendedHolidayReturnsOffered == nil {
		return nil, false
	}
	return o.ExtendedHolidayReturnsOffered, true
}

// HasExtendedHolidayReturnsOffered returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasExtendedHolidayReturnsOffered() bool {
	if o != nil && o.ExtendedHolidayReturnsOffered != nil {
		return true
	}

	return false
}

// SetExtendedHolidayReturnsOffered gets a reference to the given bool and assigns it to the ExtendedHolidayReturnsOffered field.
func (o *ReturnPolicyRequest) SetExtendedHolidayReturnsOffered(v bool) {
	o.ExtendedHolidayReturnsOffered = &v
}

// GetInternationalOverride returns the InternationalOverride field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetInternationalOverride() InternationalReturnOverrideType {
	if o == nil || o.InternationalOverride == nil {
		var ret InternationalReturnOverrideType
		return ret
	}
	return *o.InternationalOverride
}

// GetInternationalOverrideOk returns a tuple with the InternationalOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetInternationalOverrideOk() (*InternationalReturnOverrideType, bool) {
	if o == nil || o.InternationalOverride == nil {
		return nil, false
	}
	return o.InternationalOverride, true
}

// HasInternationalOverride returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasInternationalOverride() bool {
	if o != nil && o.InternationalOverride != nil {
		return true
	}

	return false
}

// SetInternationalOverride gets a reference to the given InternationalReturnOverrideType and assigns it to the InternationalOverride field.
func (o *ReturnPolicyRequest) SetInternationalOverride(v InternationalReturnOverrideType) {
	o.InternationalOverride = &v
}

// GetMarketplaceId returns the MarketplaceId field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetMarketplaceId() string {
	if o == nil || o.MarketplaceId == nil {
		var ret string
		return ret
	}
	return *o.MarketplaceId
}

// GetMarketplaceIdOk returns a tuple with the MarketplaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetMarketplaceIdOk() (*string, bool) {
	if o == nil || o.MarketplaceId == nil {
		return nil, false
	}
	return o.MarketplaceId, true
}

// HasMarketplaceId returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasMarketplaceId() bool {
	if o != nil && o.MarketplaceId != nil {
		return true
	}

	return false
}

// SetMarketplaceId gets a reference to the given string and assigns it to the MarketplaceId field.
func (o *ReturnPolicyRequest) SetMarketplaceId(v string) {
	o.MarketplaceId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReturnPolicyRequest) SetName(v string) {
	o.Name = &v
}

// GetRefundMethod returns the RefundMethod field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetRefundMethod() string {
	if o == nil || o.RefundMethod == nil {
		var ret string
		return ret
	}
	return *o.RefundMethod
}

// GetRefundMethodOk returns a tuple with the RefundMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetRefundMethodOk() (*string, bool) {
	if o == nil || o.RefundMethod == nil {
		return nil, false
	}
	return o.RefundMethod, true
}

// HasRefundMethod returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasRefundMethod() bool {
	if o != nil && o.RefundMethod != nil {
		return true
	}

	return false
}

// SetRefundMethod gets a reference to the given string and assigns it to the RefundMethod field.
func (o *ReturnPolicyRequest) SetRefundMethod(v string) {
	o.RefundMethod = &v
}

// GetRestockingFeePercentage returns the RestockingFeePercentage field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetRestockingFeePercentage() string {
	if o == nil || o.RestockingFeePercentage == nil {
		var ret string
		return ret
	}
	return *o.RestockingFeePercentage
}

// GetRestockingFeePercentageOk returns a tuple with the RestockingFeePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetRestockingFeePercentageOk() (*string, bool) {
	if o == nil || o.RestockingFeePercentage == nil {
		return nil, false
	}
	return o.RestockingFeePercentage, true
}

// HasRestockingFeePercentage returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasRestockingFeePercentage() bool {
	if o != nil && o.RestockingFeePercentage != nil {
		return true
	}

	return false
}

// SetRestockingFeePercentage gets a reference to the given string and assigns it to the RestockingFeePercentage field.
func (o *ReturnPolicyRequest) SetRestockingFeePercentage(v string) {
	o.RestockingFeePercentage = &v
}

// GetReturnInstructions returns the ReturnInstructions field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetReturnInstructions() string {
	if o == nil || o.ReturnInstructions == nil {
		var ret string
		return ret
	}
	return *o.ReturnInstructions
}

// GetReturnInstructionsOk returns a tuple with the ReturnInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetReturnInstructionsOk() (*string, bool) {
	if o == nil || o.ReturnInstructions == nil {
		return nil, false
	}
	return o.ReturnInstructions, true
}

// HasReturnInstructions returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasReturnInstructions() bool {
	if o != nil && o.ReturnInstructions != nil {
		return true
	}

	return false
}

// SetReturnInstructions gets a reference to the given string and assigns it to the ReturnInstructions field.
func (o *ReturnPolicyRequest) SetReturnInstructions(v string) {
	o.ReturnInstructions = &v
}

// GetReturnMethod returns the ReturnMethod field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetReturnMethod() string {
	if o == nil || o.ReturnMethod == nil {
		var ret string
		return ret
	}
	return *o.ReturnMethod
}

// GetReturnMethodOk returns a tuple with the ReturnMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetReturnMethodOk() (*string, bool) {
	if o == nil || o.ReturnMethod == nil {
		return nil, false
	}
	return o.ReturnMethod, true
}

// HasReturnMethod returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasReturnMethod() bool {
	if o != nil && o.ReturnMethod != nil {
		return true
	}

	return false
}

// SetReturnMethod gets a reference to the given string and assigns it to the ReturnMethod field.
func (o *ReturnPolicyRequest) SetReturnMethod(v string) {
	o.ReturnMethod = &v
}

// GetReturnPeriod returns the ReturnPeriod field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetReturnPeriod() TimeDuration {
	if o == nil || o.ReturnPeriod == nil {
		var ret TimeDuration
		return ret
	}
	return *o.ReturnPeriod
}

// GetReturnPeriodOk returns a tuple with the ReturnPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetReturnPeriodOk() (*TimeDuration, bool) {
	if o == nil || o.ReturnPeriod == nil {
		return nil, false
	}
	return o.ReturnPeriod, true
}

// HasReturnPeriod returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasReturnPeriod() bool {
	if o != nil && o.ReturnPeriod != nil {
		return true
	}

	return false
}

// SetReturnPeriod gets a reference to the given TimeDuration and assigns it to the ReturnPeriod field.
func (o *ReturnPolicyRequest) SetReturnPeriod(v TimeDuration) {
	o.ReturnPeriod = &v
}

// GetReturnsAccepted returns the ReturnsAccepted field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetReturnsAccepted() bool {
	if o == nil || o.ReturnsAccepted == nil {
		var ret bool
		return ret
	}
	return *o.ReturnsAccepted
}

// GetReturnsAcceptedOk returns a tuple with the ReturnsAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetReturnsAcceptedOk() (*bool, bool) {
	if o == nil || o.ReturnsAccepted == nil {
		return nil, false
	}
	return o.ReturnsAccepted, true
}

// HasReturnsAccepted returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasReturnsAccepted() bool {
	if o != nil && o.ReturnsAccepted != nil {
		return true
	}

	return false
}

// SetReturnsAccepted gets a reference to the given bool and assigns it to the ReturnsAccepted field.
func (o *ReturnPolicyRequest) SetReturnsAccepted(v bool) {
	o.ReturnsAccepted = &v
}

// GetReturnShippingCostPayer returns the ReturnShippingCostPayer field value if set, zero value otherwise.
func (o *ReturnPolicyRequest) GetReturnShippingCostPayer() string {
	if o == nil || o.ReturnShippingCostPayer == nil {
		var ret string
		return ret
	}
	return *o.ReturnShippingCostPayer
}

// GetReturnShippingCostPayerOk returns a tuple with the ReturnShippingCostPayer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnPolicyRequest) GetReturnShippingCostPayerOk() (*string, bool) {
	if o == nil || o.ReturnShippingCostPayer == nil {
		return nil, false
	}
	return o.ReturnShippingCostPayer, true
}

// HasReturnShippingCostPayer returns a boolean if a field has been set.
func (o *ReturnPolicyRequest) HasReturnShippingCostPayer() bool {
	if o != nil && o.ReturnShippingCostPayer != nil {
		return true
	}

	return false
}

// SetReturnShippingCostPayer gets a reference to the given string and assigns it to the ReturnShippingCostPayer field.
func (o *ReturnPolicyRequest) SetReturnShippingCostPayer(v string) {
	o.ReturnShippingCostPayer = &v
}

func (o ReturnPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategoryTypes != nil {
		toSerialize["categoryTypes"] = o.CategoryTypes
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ExtendedHolidayReturnsOffered != nil {
		toSerialize["extendedHolidayReturnsOffered"] = o.ExtendedHolidayReturnsOffered
	}
	if o.InternationalOverride != nil {
		toSerialize["internationalOverride"] = o.InternationalOverride
	}
	if o.MarketplaceId != nil {
		toSerialize["marketplaceId"] = o.MarketplaceId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RefundMethod != nil {
		toSerialize["refundMethod"] = o.RefundMethod
	}
	if o.RestockingFeePercentage != nil {
		toSerialize["restockingFeePercentage"] = o.RestockingFeePercentage
	}
	if o.ReturnInstructions != nil {
		toSerialize["returnInstructions"] = o.ReturnInstructions
	}
	if o.ReturnMethod != nil {
		toSerialize["returnMethod"] = o.ReturnMethod
	}
	if o.ReturnPeriod != nil {
		toSerialize["returnPeriod"] = o.ReturnPeriod
	}
	if o.ReturnsAccepted != nil {
		toSerialize["returnsAccepted"] = o.ReturnsAccepted
	}
	if o.ReturnShippingCostPayer != nil {
		toSerialize["returnShippingCostPayer"] = o.ReturnShippingCostPayer
	}
	return json.Marshal(toSerialize)
}

type NullableReturnPolicyRequest struct {
	value *ReturnPolicyRequest
	isSet bool
}

func (v NullableReturnPolicyRequest) Get() *ReturnPolicyRequest {
	return v.value
}

func (v *NullableReturnPolicyRequest) Set(val *ReturnPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnPolicyRequest(val *ReturnPolicyRequest) *NullableReturnPolicyRequest {
	return &NullableReturnPolicyRequest{value: val, isSet: true}
}

func (v NullableReturnPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


