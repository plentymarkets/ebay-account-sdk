/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// InternationalReturnOverrideType This type defines the fields for a seller's international return policy. If a seller does not populate the fields in this complex type, the international return policy defaults to the return policy set for domestic returns.
type InternationalReturnOverrideType struct {
	// Valid in the US marketplace only, this optional field indicates additional services (other than money-back) that sellers can offer buyers for <a href=\"http://developer.ebay.com/DevZone/guides/features-guide/default.html#Development/Post-Order-Returns.html#return-reasons\" target=\"_blank\">remorse returns</a>.  <br><br>As of version 1.2.0, the only accepted value for this field is <code>REPLACEMENT</code>. This field is valid in only the US marketplace, any supplied value is ignored in other marketplaces. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum'>eBay API documentation</a>
	ReturnMethod *string `json:"returnMethod,omitempty"`
	ReturnPeriod *TimeDuration `json:"returnPeriod,omitempty"`
	// If set to <code>true</code>, the seller allows international returns. If set to <code>false</code>, the seller does not accept international returns.  <br><br><i>Required if </i> the seller wants to set an international return policy that differs from their domestic return policy.
	ReturnsAccepted *bool `json:"returnsAccepted,omitempty"`
	// This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either <code>BUYER</code> or <code>SELLER</code>.  <br><br>Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for SNAD-related issues.  <br><br><i>Required if </i> the <b>internationalOverride.returnsAccepted</b> field is set to <code>true</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum'>eBay API documentation</a>
	ReturnShippingCostPayer *string `json:"returnShippingCostPayer,omitempty"`
}

// NewInternationalReturnOverrideType instantiates a new InternationalReturnOverrideType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternationalReturnOverrideType() *InternationalReturnOverrideType {
	this := InternationalReturnOverrideType{}
	return &this
}

// NewInternationalReturnOverrideTypeWithDefaults instantiates a new InternationalReturnOverrideType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternationalReturnOverrideTypeWithDefaults() *InternationalReturnOverrideType {
	this := InternationalReturnOverrideType{}
	return &this
}

// GetReturnMethod returns the ReturnMethod field value if set, zero value otherwise.
func (o *InternationalReturnOverrideType) GetReturnMethod() string {
	if o == nil || o.ReturnMethod == nil {
		var ret string
		return ret
	}
	return *o.ReturnMethod
}

// GetReturnMethodOk returns a tuple with the ReturnMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalReturnOverrideType) GetReturnMethodOk() (*string, bool) {
	if o == nil || o.ReturnMethod == nil {
		return nil, false
	}
	return o.ReturnMethod, true
}

// HasReturnMethod returns a boolean if a field has been set.
func (o *InternationalReturnOverrideType) HasReturnMethod() bool {
	if o != nil && o.ReturnMethod != nil {
		return true
	}

	return false
}

// SetReturnMethod gets a reference to the given string and assigns it to the ReturnMethod field.
func (o *InternationalReturnOverrideType) SetReturnMethod(v string) {
	o.ReturnMethod = &v
}

// GetReturnPeriod returns the ReturnPeriod field value if set, zero value otherwise.
func (o *InternationalReturnOverrideType) GetReturnPeriod() TimeDuration {
	if o == nil || o.ReturnPeriod == nil {
		var ret TimeDuration
		return ret
	}
	return *o.ReturnPeriod
}

// GetReturnPeriodOk returns a tuple with the ReturnPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalReturnOverrideType) GetReturnPeriodOk() (*TimeDuration, bool) {
	if o == nil || o.ReturnPeriod == nil {
		return nil, false
	}
	return o.ReturnPeriod, true
}

// HasReturnPeriod returns a boolean if a field has been set.
func (o *InternationalReturnOverrideType) HasReturnPeriod() bool {
	if o != nil && o.ReturnPeriod != nil {
		return true
	}

	return false
}

// SetReturnPeriod gets a reference to the given TimeDuration and assigns it to the ReturnPeriod field.
func (o *InternationalReturnOverrideType) SetReturnPeriod(v TimeDuration) {
	o.ReturnPeriod = &v
}

// GetReturnsAccepted returns the ReturnsAccepted field value if set, zero value otherwise.
func (o *InternationalReturnOverrideType) GetReturnsAccepted() bool {
	if o == nil || o.ReturnsAccepted == nil {
		var ret bool
		return ret
	}
	return *o.ReturnsAccepted
}

// GetReturnsAcceptedOk returns a tuple with the ReturnsAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalReturnOverrideType) GetReturnsAcceptedOk() (*bool, bool) {
	if o == nil || o.ReturnsAccepted == nil {
		return nil, false
	}
	return o.ReturnsAccepted, true
}

// HasReturnsAccepted returns a boolean if a field has been set.
func (o *InternationalReturnOverrideType) HasReturnsAccepted() bool {
	if o != nil && o.ReturnsAccepted != nil {
		return true
	}

	return false
}

// SetReturnsAccepted gets a reference to the given bool and assigns it to the ReturnsAccepted field.
func (o *InternationalReturnOverrideType) SetReturnsAccepted(v bool) {
	o.ReturnsAccepted = &v
}

// GetReturnShippingCostPayer returns the ReturnShippingCostPayer field value if set, zero value otherwise.
func (o *InternationalReturnOverrideType) GetReturnShippingCostPayer() string {
	if o == nil || o.ReturnShippingCostPayer == nil {
		var ret string
		return ret
	}
	return *o.ReturnShippingCostPayer
}

// GetReturnShippingCostPayerOk returns a tuple with the ReturnShippingCostPayer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalReturnOverrideType) GetReturnShippingCostPayerOk() (*string, bool) {
	if o == nil || o.ReturnShippingCostPayer == nil {
		return nil, false
	}
	return o.ReturnShippingCostPayer, true
}

// HasReturnShippingCostPayer returns a boolean if a field has been set.
func (o *InternationalReturnOverrideType) HasReturnShippingCostPayer() bool {
	if o != nil && o.ReturnShippingCostPayer != nil {
		return true
	}

	return false
}

// SetReturnShippingCostPayer gets a reference to the given string and assigns it to the ReturnShippingCostPayer field.
func (o *InternationalReturnOverrideType) SetReturnShippingCostPayer(v string) {
	o.ReturnShippingCostPayer = &v
}

func (o InternationalReturnOverrideType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReturnMethod != nil {
		toSerialize["returnMethod"] = o.ReturnMethod
	}
	if o.ReturnPeriod != nil {
		toSerialize["returnPeriod"] = o.ReturnPeriod
	}
	if o.ReturnsAccepted != nil {
		toSerialize["returnsAccepted"] = o.ReturnsAccepted
	}
	if o.ReturnShippingCostPayer != nil {
		toSerialize["returnShippingCostPayer"] = o.ReturnShippingCostPayer
	}
	return json.Marshal(toSerialize)
}

type NullableInternationalReturnOverrideType struct {
	value *InternationalReturnOverrideType
	isSet bool
}

func (v NullableInternationalReturnOverrideType) Get() *InternationalReturnOverrideType {
	return v.value
}

func (v *NullableInternationalReturnOverrideType) Set(val *InternationalReturnOverrideType) {
	v.value = val
	v.isSet = true
}

func (v NullableInternationalReturnOverrideType) IsSet() bool {
	return v.isSet
}

func (v *NullableInternationalReturnOverrideType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternationalReturnOverrideType(val *InternationalReturnOverrideType) *NullableInternationalReturnOverrideType {
	return &NullableInternationalReturnOverrideType{value: val, isSet: true}
}

func (v NullableInternationalReturnOverrideType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternationalReturnOverrideType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


