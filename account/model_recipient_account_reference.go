/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (seller-defined custom policies and eBay business policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// RecipientAccountReference Recipient account information, like PayPal email. If the payment method is PayPal, this structure contains the recipient's PayPal email address.<p class=\"tablenote\"><b>Note:</b> This type and its fields do not apply to listings from sellers who are enabled for the eBay <a href=\"/managed-payments\" title=\"eBay Developers Program page\" target=\"_blank\">managed payments</a> program. </p>
type RecipientAccountReference struct {
	// Contains the PayPal email address of the recipient (seller) if <b>referenceType</b> is set to <code>PAYPAL_EMAIL</code>.
	ReferenceId *string `json:"referenceId,omitempty"`
	// This field's value indicates the type of account where payment will be received. Currently, the only supported value is PAYPAL_EMAIL. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:RecipientAccountReferenceTypeEnum'>eBay API documentation</a>
	ReferenceType *string `json:"referenceType,omitempty"`
}

// NewRecipientAccountReference instantiates a new RecipientAccountReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipientAccountReference() *RecipientAccountReference {
	this := RecipientAccountReference{}
	return &this
}

// NewRecipientAccountReferenceWithDefaults instantiates a new RecipientAccountReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipientAccountReferenceWithDefaults() *RecipientAccountReference {
	this := RecipientAccountReference{}
	return &this
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *RecipientAccountReference) GetReferenceId() string {
	if o == nil || o.ReferenceId == nil {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAccountReference) GetReferenceIdOk() (*string, bool) {
	if o == nil || o.ReferenceId == nil {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *RecipientAccountReference) HasReferenceId() bool {
	if o != nil && o.ReferenceId != nil {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *RecipientAccountReference) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetReferenceType returns the ReferenceType field value if set, zero value otherwise.
func (o *RecipientAccountReference) GetReferenceType() string {
	if o == nil || o.ReferenceType == nil {
		var ret string
		return ret
	}
	return *o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAccountReference) GetReferenceTypeOk() (*string, bool) {
	if o == nil || o.ReferenceType == nil {
		return nil, false
	}
	return o.ReferenceType, true
}

// HasReferenceType returns a boolean if a field has been set.
func (o *RecipientAccountReference) HasReferenceType() bool {
	if o != nil && o.ReferenceType != nil {
		return true
	}

	return false
}

// SetReferenceType gets a reference to the given string and assigns it to the ReferenceType field.
func (o *RecipientAccountReference) SetReferenceType(v string) {
	o.ReferenceType = &v
}

func (o RecipientAccountReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReferenceId != nil {
		toSerialize["referenceId"] = o.ReferenceId
	}
	if o.ReferenceType != nil {
		toSerialize["referenceType"] = o.ReferenceType
	}
	return json.Marshal(toSerialize)
}

type NullableRecipientAccountReference struct {
	value *RecipientAccountReference
	isSet bool
}

func (v NullableRecipientAccountReference) Get() *RecipientAccountReference {
	return v.value
}

func (v *NullableRecipientAccountReference) Set(val *RecipientAccountReference) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipientAccountReference) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipientAccountReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipientAccountReference(val *RecipientAccountReference) *NullableRecipientAccountReference {
	return &NullableRecipientAccountReference{value: val, isSet: true}
}

func (v NullableRecipientAccountReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipientAccountReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


