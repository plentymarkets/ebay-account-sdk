/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (seller-defined custom policies and eBay business policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// TimeDuration A complex type that specifies a period of time using a specified time-measurement unit.
type TimeDuration struct {
	// A time-measurement unit that specifies a singular period of time.  <br><br>A span of time is defined when you apply the value specified in the <b>value</b> field to the value specified for <b>unit</b>. <br><br>Time-measurement units can be YEAR, MONTH, DAY, and so on. See <b>TimeDurationUnitEnum</b> for a complete list of possible time-measurement units. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:TimeDurationUnitEnum'>eBay API documentation</a>
	Unit *string `json:"unit,omitempty"`
	// An integer that represents an amount of time, as measured by the time-measurement unit specified in the <b>unit</b> field.
	Value *int32 `json:"value,omitempty"`
}

// NewTimeDuration instantiates a new TimeDuration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeDuration() *TimeDuration {
	this := TimeDuration{}
	return &this
}

// NewTimeDurationWithDefaults instantiates a new TimeDuration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeDurationWithDefaults() *TimeDuration {
	this := TimeDuration{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *TimeDuration) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeDuration) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *TimeDuration) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *TimeDuration) SetUnit(v string) {
	o.Unit = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TimeDuration) GetValue() int32 {
	if o == nil || o.Value == nil {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeDuration) GetValueOk() (*int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TimeDuration) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *TimeDuration) SetValue(v int32) {
	o.Value = &v
}

func (o TimeDuration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableTimeDuration struct {
	value *TimeDuration
	isSet bool
}

func (v NullableTimeDuration) Get() *TimeDuration {
	return v.value
}

func (v *NullableTimeDuration) Set(val *TimeDuration) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeDuration) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeDuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeDuration(val *TimeDuration) *NullableTimeDuration {
	return &NullableTimeDuration{value: val, isSet: true}
}

func (v NullableTimeDuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeDuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


