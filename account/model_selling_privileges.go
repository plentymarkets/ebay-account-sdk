/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (seller-defined custom policies and eBay business policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
)

// SellingPrivileges A merchant's selling limit, and the status of their account registration.
type SellingPrivileges struct {
	// If set to <code>true</code>, the seller's registration is completed.
	SellerRegistrationCompleted *bool `json:"sellerRegistrationCompleted,omitempty"`
	SellingLimit *SellingLimit `json:"sellingLimit,omitempty"`
}

// NewSellingPrivileges instantiates a new SellingPrivileges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSellingPrivileges() *SellingPrivileges {
	this := SellingPrivileges{}
	return &this
}

// NewSellingPrivilegesWithDefaults instantiates a new SellingPrivileges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellingPrivilegesWithDefaults() *SellingPrivileges {
	this := SellingPrivileges{}
	return &this
}

// GetSellerRegistrationCompleted returns the SellerRegistrationCompleted field value if set, zero value otherwise.
func (o *SellingPrivileges) GetSellerRegistrationCompleted() bool {
	if o == nil || o.SellerRegistrationCompleted == nil {
		var ret bool
		return ret
	}
	return *o.SellerRegistrationCompleted
}

// GetSellerRegistrationCompletedOk returns a tuple with the SellerRegistrationCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellingPrivileges) GetSellerRegistrationCompletedOk() (*bool, bool) {
	if o == nil || o.SellerRegistrationCompleted == nil {
		return nil, false
	}
	return o.SellerRegistrationCompleted, true
}

// HasSellerRegistrationCompleted returns a boolean if a field has been set.
func (o *SellingPrivileges) HasSellerRegistrationCompleted() bool {
	if o != nil && o.SellerRegistrationCompleted != nil {
		return true
	}

	return false
}

// SetSellerRegistrationCompleted gets a reference to the given bool and assigns it to the SellerRegistrationCompleted field.
func (o *SellingPrivileges) SetSellerRegistrationCompleted(v bool) {
	o.SellerRegistrationCompleted = &v
}

// GetSellingLimit returns the SellingLimit field value if set, zero value otherwise.
func (o *SellingPrivileges) GetSellingLimit() SellingLimit {
	if o == nil || o.SellingLimit == nil {
		var ret SellingLimit
		return ret
	}
	return *o.SellingLimit
}

// GetSellingLimitOk returns a tuple with the SellingLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellingPrivileges) GetSellingLimitOk() (*SellingLimit, bool) {
	if o == nil || o.SellingLimit == nil {
		return nil, false
	}
	return o.SellingLimit, true
}

// HasSellingLimit returns a boolean if a field has been set.
func (o *SellingPrivileges) HasSellingLimit() bool {
	if o != nil && o.SellingLimit != nil {
		return true
	}

	return false
}

// SetSellingLimit gets a reference to the given SellingLimit and assigns it to the SellingLimit field.
func (o *SellingPrivileges) SetSellingLimit(v SellingLimit) {
	o.SellingLimit = &v
}

func (o SellingPrivileges) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SellerRegistrationCompleted != nil {
		toSerialize["sellerRegistrationCompleted"] = o.SellerRegistrationCompleted
	}
	if o.SellingLimit != nil {
		toSerialize["sellingLimit"] = o.SellingLimit
	}
	return json.Marshal(toSerialize)
}

type NullableSellingPrivileges struct {
	value *SellingPrivileges
	isSet bool
}

func (v NullableSellingPrivileges) Get() *SellingPrivileges {
	return v.value
}

func (v *NullableSellingPrivileges) Set(val *SellingPrivileges) {
	v.value = val
	v.isSet = true
}

func (v NullableSellingPrivileges) IsSet() bool {
	return v.isSet
}

func (v *NullableSellingPrivileges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSellingPrivileges(val *SellingPrivileges) *NullableSellingPrivileges {
	return &NullableSellingPrivileges{value: val, isSet: true}
}

func (v NullableSellingPrivileges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSellingPrivileges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


