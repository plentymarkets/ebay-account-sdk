/*
Account API

The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br><br>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.

API version: v1.6.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ebayaccount

import (
	"encoding/json"
)

// Deposit A container that describes the details of a deposit. Used only with motor listings.
type Deposit struct {
	Amount *Amount `json:"amount,omitempty"`
	DueIn *TimeDuration `json:"dueIn,omitempty"`
	// This array is only necessary for sellers who have <em>not</em> been onboarded for eBay managed payments, and the only value that should be set is '<code>PAYPAL</code>'. <br /><br />The <b>brands</b> field is not applicable when setting a motor vehicle deposit. Set the <b>paymentMethodType</b> value to <code>PAYPAL</code>, the <b>recipientAccountReference.referenceType</b> field to <code>PAYPAL_EMAIL</code>, and insert the PayPal payment address into the <b>recipientAccountReference.referenceId</b> field.
	PaymentMethods *[]PaymentMethod `json:"paymentMethods,omitempty"`
}

// NewDeposit instantiates a new Deposit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeposit() *Deposit {
	this := Deposit{}
	return &this
}

// NewDepositWithDefaults instantiates a new Deposit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepositWithDefaults() *Deposit {
	this := Deposit{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Deposit) GetAmount() Amount {
	if o == nil || o.Amount == nil {
		var ret Amount
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deposit) GetAmountOk() (*Amount, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Deposit) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Amount and assigns it to the Amount field.
func (o *Deposit) SetAmount(v Amount) {
	o.Amount = &v
}

// GetDueIn returns the DueIn field value if set, zero value otherwise.
func (o *Deposit) GetDueIn() TimeDuration {
	if o == nil || o.DueIn == nil {
		var ret TimeDuration
		return ret
	}
	return *o.DueIn
}

// GetDueInOk returns a tuple with the DueIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deposit) GetDueInOk() (*TimeDuration, bool) {
	if o == nil || o.DueIn == nil {
		return nil, false
	}
	return o.DueIn, true
}

// HasDueIn returns a boolean if a field has been set.
func (o *Deposit) HasDueIn() bool {
	if o != nil && o.DueIn != nil {
		return true
	}

	return false
}

// SetDueIn gets a reference to the given TimeDuration and assigns it to the DueIn field.
func (o *Deposit) SetDueIn(v TimeDuration) {
	o.DueIn = &v
}

// GetPaymentMethods returns the PaymentMethods field value if set, zero value otherwise.
func (o *Deposit) GetPaymentMethods() []PaymentMethod {
	if o == nil || o.PaymentMethods == nil {
		var ret []PaymentMethod
		return ret
	}
	return *o.PaymentMethods
}

// GetPaymentMethodsOk returns a tuple with the PaymentMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deposit) GetPaymentMethodsOk() (*[]PaymentMethod, bool) {
	if o == nil || o.PaymentMethods == nil {
		return nil, false
	}
	return o.PaymentMethods, true
}

// HasPaymentMethods returns a boolean if a field has been set.
func (o *Deposit) HasPaymentMethods() bool {
	if o != nil && o.PaymentMethods != nil {
		return true
	}

	return false
}

// SetPaymentMethods gets a reference to the given []PaymentMethod and assigns it to the PaymentMethods field.
func (o *Deposit) SetPaymentMethods(v []PaymentMethod) {
	o.PaymentMethods = &v
}

func (o Deposit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.DueIn != nil {
		toSerialize["dueIn"] = o.DueIn
	}
	if o.PaymentMethods != nil {
		toSerialize["paymentMethods"] = o.PaymentMethods
	}
	return json.Marshal(toSerialize)
}

type NullableDeposit struct {
	value *Deposit
	isSet bool
}

func (v NullableDeposit) Get() *Deposit {
	return v.value
}

func (v *NullableDeposit) Set(val *Deposit) {
	v.value = val
	v.isSet = true
}

func (v NullableDeposit) IsSet() bool {
	return v.isSet
}

func (v *NullableDeposit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeposit(val *Deposit) *NullableDeposit {
	return &NullableDeposit{value: val, isSet: true}
}

func (v NullableDeposit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeposit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


